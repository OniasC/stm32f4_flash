
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cbc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000e44  08000e44  00010e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000e5c  08000e5c  00010e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000e60  08000e60  00010e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  08000e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
  7 .bss          000000b0  20000020  20000020  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000d0  200000d0  00020020  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   00004fd3  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000f56  00000000  00000000  00025023  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000708  00000000  00000000  00025f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000660  00000000  00000000  00026688  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000027eb  00000000  00000000  00026ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000025ff  00000000  00000000  000294d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002bad2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001c88  00000000  00000000  0002bb50  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002d7d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000e2c 	.word	0x08000e2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08000e2c 	.word	0x08000e2c

080001c8 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80001dc:	68fa      	ldr	r2, [r7, #12]
 80001de:	4b25      	ldr	r3, [pc, #148]	; (8000274 <DMA_Init+0xac>)
 80001e0:	4013      	ands	r3, r2
 80001e2:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	68db      	ldr	r3, [r3, #12]
 80001ec:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80001f2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80001f4:	683b      	ldr	r3, [r7, #0]
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80001fe:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	6a1b      	ldr	r3, [r3, #32]
 8000204:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800020a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000210:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000216:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800021c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800021e:	68fa      	ldr	r2, [r7, #12]
 8000220:	4313      	orrs	r3, r2
 8000222:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	68fa      	ldr	r2, [r7, #12]
 8000228:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	f023 0307 	bic.w	r3, r3, #7
 8000236:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000240:	4313      	orrs	r3, r2
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	4313      	orrs	r3, r2
 8000246:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	68fa      	ldr	r2, [r7, #12]
 800024c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	691a      	ldr	r2, [r3, #16]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	685a      	ldr	r2, [r3, #4]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	689a      	ldr	r2, [r3, #8]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	60da      	str	r2, [r3, #12]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	f01c803f 	.word	0xf01c803f

08000278 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	460b      	mov	r3, r1
 8000282:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000284:	78fb      	ldrb	r3, [r7, #3]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d006      	beq.n	8000298 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f043 0201 	orr.w	r2, r3, #1
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000296:	e005      	b.n	80002a4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f023 0201 	bic.w	r2, r3, #1
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	601a      	str	r2, [r3, #0]
}
 80002a4:	bf00      	nop
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr

080002b0 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80002b8:	2300      	movs	r3, #0
 80002ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f003 0301 	and.w	r3, r3, #1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d002      	beq.n	80002ce <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80002c8:	2301      	movs	r3, #1
 80002ca:	73fb      	strb	r3, [r7, #15]
 80002cc:	e001      	b.n	80002d2 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80002ce:	2300      	movs	r3, #0
 80002d0:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80002d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr

080002e0 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b087      	sub	sp, #28
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80002ea:	2300      	movs	r3, #0
 80002ec:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a15      	ldr	r2, [pc, #84]	; (800034c <DMA_GetFlagStatus+0x6c>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d802      	bhi.n	8000300 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80002fa:	4b15      	ldr	r3, [pc, #84]	; (8000350 <DMA_GetFlagStatus+0x70>)
 80002fc:	613b      	str	r3, [r7, #16]
 80002fe:	e001      	b.n	8000304 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000300:	4b14      	ldr	r3, [pc, #80]	; (8000354 <DMA_GetFlagStatus+0x74>)
 8000302:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800030a:	2b00      	cmp	r3, #0
 800030c:	d003      	beq.n	8000316 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800030e:	693b      	ldr	r3, [r7, #16]
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	e002      	b.n	800031c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000316:	693b      	ldr	r3, [r7, #16]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000322:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000326:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	4013      	ands	r3, r2
 800032e:	2b00      	cmp	r3, #0
 8000330:	d002      	beq.n	8000338 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000332:	2301      	movs	r3, #1
 8000334:	75fb      	strb	r3, [r7, #23]
 8000336:	e001      	b.n	800033c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000338:	2300      	movs	r3, #0
 800033a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800033c:	7dfb      	ldrb	r3, [r7, #23]
}
 800033e:	4618      	mov	r0, r3
 8000340:	371c      	adds	r7, #28
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	4002640f 	.word	0x4002640f
 8000350:	40026000 	.word	0x40026000
 8000354:	40026400 	.word	0x40026400

08000358 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a10      	ldr	r2, [pc, #64]	; (80003a8 <DMA_ClearFlag+0x50>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d802      	bhi.n	8000370 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800036a:	4b10      	ldr	r3, [pc, #64]	; (80003ac <DMA_ClearFlag+0x54>)
 800036c:	60fb      	str	r3, [r7, #12]
 800036e:	e001      	b.n	8000374 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000370:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <DMA_ClearFlag+0x58>)
 8000372:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800037a:	2b00      	cmp	r3, #0
 800037c:	d007      	beq.n	800038e <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000384:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000388:	68fa      	ldr	r2, [r7, #12]
 800038a:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 800038c:	e006      	b.n	800039c <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000394:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000398:	68fa      	ldr	r2, [r7, #12]
 800039a:	6093      	str	r3, [r2, #8]
}
 800039c:	bf00      	nop
 800039e:	3714      	adds	r7, #20
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	4002640f 	.word	0x4002640f
 80003ac:	40026000 	.word	0x40026000
 80003b0:	40026400 	.word	0x40026400

080003b4 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 80003b8:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <FLASH_Unlock+0x24>)
 80003ba:	691b      	ldr	r3, [r3, #16]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	da05      	bge.n	80003cc <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <FLASH_Unlock+0x24>)
 80003c2:	4a06      	ldr	r2, [pc, #24]	; (80003dc <FLASH_Unlock+0x28>)
 80003c4:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 80003c6:	4b04      	ldr	r3, [pc, #16]	; (80003d8 <FLASH_Unlock+0x24>)
 80003c8:	4a05      	ldr	r2, [pc, #20]	; (80003e0 <FLASH_Unlock+0x2c>)
 80003ca:	605a      	str	r2, [r3, #4]
  }  
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40023c00 	.word	0x40023c00
 80003dc:	45670123 	.word	0x45670123
 80003e0:	cdef89ab 	.word	0xcdef89ab

080003e4 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80003e8:	4a05      	ldr	r2, [pc, #20]	; (8000400 <FLASH_Lock+0x1c>)
 80003ea:	4b05      	ldr	r3, [pc, #20]	; (8000400 <FLASH_Lock+0x1c>)
 80003ec:	691b      	ldr	r3, [r3, #16]
 80003ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003f2:	6113      	str	r3, [r2, #16]
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40023c00 	.word	0x40023c00

08000404 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	460b      	mov	r3, r1
 800040e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 8000414:	2308      	movs	r3, #8
 8000416:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8000418:	78fb      	ldrb	r3, [r7, #3]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d102      	bne.n	8000424 <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800041e:	2300      	movs	r3, #0
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	e010      	b.n	8000446 <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 8000424:	78fb      	ldrb	r3, [r7, #3]
 8000426:	2b01      	cmp	r3, #1
 8000428:	d103      	bne.n	8000432 <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800042a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	e009      	b.n	8000446 <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 8000432:	78fb      	ldrb	r3, [r7, #3]
 8000434:	2b02      	cmp	r3, #2
 8000436:	d103      	bne.n	8000440 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8000438:	f44f 7300 	mov.w	r3, #512	; 0x200
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	e002      	b.n	8000446 <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000440:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000444:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8000446:	f000 f8b7 	bl	80005b8 <FLASH_WaitForLastOperation>
 800044a:	4603      	mov	r3, r0
 800044c:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 800044e:	7afb      	ldrb	r3, [r7, #11]
 8000450:	2b08      	cmp	r3, #8
 8000452:	d12f      	bne.n	80004b4 <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8000454:	4a1a      	ldr	r2, [pc, #104]	; (80004c0 <FLASH_EraseSector+0xbc>)
 8000456:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <FLASH_EraseSector+0xbc>)
 8000458:	691b      	ldr	r3, [r3, #16]
 800045a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800045e:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 8000460:	4917      	ldr	r1, [pc, #92]	; (80004c0 <FLASH_EraseSector+0xbc>)
 8000462:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <FLASH_EraseSector+0xbc>)
 8000464:	691a      	ldr	r2, [r3, #16]
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	4313      	orrs	r3, r2
 800046a:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 800046c:	4a14      	ldr	r2, [pc, #80]	; (80004c0 <FLASH_EraseSector+0xbc>)
 800046e:	4b14      	ldr	r3, [pc, #80]	; (80004c0 <FLASH_EraseSector+0xbc>)
 8000470:	691b      	ldr	r3, [r3, #16]
 8000472:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000476:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8000478:	4911      	ldr	r1, [pc, #68]	; (80004c0 <FLASH_EraseSector+0xbc>)
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <FLASH_EraseSector+0xbc>)
 800047c:	691a      	ldr	r2, [r3, #16]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4313      	orrs	r3, r2
 8000482:	f043 0302 	orr.w	r3, r3, #2
 8000486:	610b      	str	r3, [r1, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8000488:	4a0d      	ldr	r2, [pc, #52]	; (80004c0 <FLASH_EraseSector+0xbc>)
 800048a:	4b0d      	ldr	r3, [pc, #52]	; (80004c0 <FLASH_EraseSector+0xbc>)
 800048c:	691b      	ldr	r3, [r3, #16]
 800048e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000492:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8000494:	f000 f890 	bl	80005b8 <FLASH_WaitForLastOperation>
 8000498:	4603      	mov	r3, r0
 800049a:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 800049c:	4a08      	ldr	r2, [pc, #32]	; (80004c0 <FLASH_EraseSector+0xbc>)
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <FLASH_EraseSector+0xbc>)
 80004a0:	691b      	ldr	r3, [r3, #16]
 80004a2:	f023 0302 	bic.w	r3, r3, #2
 80004a6:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 80004a8:	4a05      	ldr	r2, [pc, #20]	; (80004c0 <FLASH_EraseSector+0xbc>)
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <FLASH_EraseSector+0xbc>)
 80004ac:	691b      	ldr	r3, [r3, #16]
 80004ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80004b2:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 80004b4:	7afb      	ldrb	r3, [r7, #11]
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3710      	adds	r7, #16
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40023c00 	.word	0x40023c00

080004c4 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 80004ce:	2308      	movs	r3, #8
 80004d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80004d2:	f000 f871 	bl	80005b8 <FLASH_WaitForLastOperation>
 80004d6:	4603      	mov	r3, r0
 80004d8:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 80004da:	7bfb      	ldrb	r3, [r7, #15]
 80004dc:	2b08      	cmp	r3, #8
 80004de:	d11e      	bne.n	800051e <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 80004e0:	4a11      	ldr	r2, [pc, #68]	; (8000528 <FLASH_ProgramWord+0x64>)
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <FLASH_ProgramWord+0x64>)
 80004e4:	691b      	ldr	r3, [r3, #16]
 80004e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80004ea:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 80004ec:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <FLASH_ProgramWord+0x64>)
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <FLASH_ProgramWord+0x64>)
 80004f0:	691b      	ldr	r3, [r3, #16]
 80004f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f6:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <FLASH_ProgramWord+0x64>)
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <FLASH_ProgramWord+0x64>)
 80004fc:	691b      	ldr	r3, [r3, #16]
 80004fe:	f043 0301 	orr.w	r3, r3, #1
 8000502:	6113      	str	r3, [r2, #16]
  
    *(__IO uint32_t*)Address = Data;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	683a      	ldr	r2, [r7, #0]
 8000508:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800050a:	f000 f855 	bl	80005b8 <FLASH_WaitForLastOperation>
 800050e:	4603      	mov	r3, r0
 8000510:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8000512:	4a05      	ldr	r2, [pc, #20]	; (8000528 <FLASH_ProgramWord+0x64>)
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <FLASH_ProgramWord+0x64>)
 8000516:	691b      	ldr	r3, [r3, #16]
 8000518:	f023 0301 	bic.w	r3, r3, #1
 800051c:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 800051e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40023c00 	.word	0x40023c00

0800052c <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag  
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <FLASH_ClearFlag+0x1c>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	60d3      	str	r3, [r2, #12]
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40023c00 	.word	0x40023c00

0800054c <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 8000552:	2308      	movs	r3, #8
 8000554:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8000556:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <FLASH_GetStatus+0x68>)
 8000558:	68db      	ldr	r3, [r3, #12]
 800055a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800055e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000562:	d102      	bne.n	800056a <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY;
 8000564:	2301      	movs	r3, #1
 8000566:	71fb      	strb	r3, [r7, #7]
 8000568:	e01c      	b.n	80005a4 <FLASH_GetStatus+0x58>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 800056a:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <FLASH_GetStatus+0x68>)
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	f003 0310 	and.w	r3, r3, #16
 8000572:	2b00      	cmp	r3, #0
 8000574:	d002      	beq.n	800057c <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP;
 8000576:	2305      	movs	r3, #5
 8000578:	71fb      	strb	r3, [r7, #7]
 800057a:	e013      	b.n	80005a4 <FLASH_GetStatus+0x58>
    }
    else
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 800057c:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <FLASH_GetStatus+0x68>)
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000584:	2b00      	cmp	r3, #0
 8000586:	d002      	beq.n	800058e <FLASH_GetStatus+0x42>
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
 8000588:	2306      	movs	r3, #6
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	e00a      	b.n	80005a4 <FLASH_GetStatus+0x58>
      }
      else
      {
        if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <FLASH_GetStatus+0x68>)
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	f003 0302 	and.w	r3, r3, #2
 8000596:	2b00      	cmp	r3, #0
 8000598:	d002      	beq.n	80005a0 <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_OPERATION;
 800059a:	2307      	movs	r3, #7
 800059c:	71fb      	strb	r3, [r7, #7]
 800059e:	e001      	b.n	80005a4 <FLASH_GetStatus+0x58>
        }
        else
        {
          flashstatus = FLASH_COMPLETE;
 80005a0:	2308      	movs	r3, #8
 80005a2:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 80005a4:	79fb      	ldrb	r3, [r7, #7]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40023c00 	.word	0x40023c00

080005b8 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 80005be:	2308      	movs	r3, #8
 80005c0:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 80005c2:	f7ff ffc3 	bl	800054c <FLASH_GetStatus>
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 80005ca:	e003      	b.n	80005d4 <FLASH_WaitForLastOperation+0x1c>
  {
    status = FLASH_GetStatus();
 80005cc:	f7ff ffbe 	bl	800054c <FLASH_GetStatus>
 80005d0:	4603      	mov	r3, r0
 80005d2:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY)
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d0f7      	beq.n	80005cc <FLASH_WaitForLastOperation+0x14>
  }
  /* Return the operation status */
  return status;
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	b2db      	uxtb	r3, r3
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b087      	sub	sp, #28
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	e076      	b.n	80006f2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000604:	2201      	movs	r2, #1
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	fa02 f303 	lsl.w	r3, r2, r3
 800060c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	4013      	ands	r3, r2
 8000616:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	429a      	cmp	r2, r3
 800061e:	d165      	bne.n	80006ec <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	2103      	movs	r1, #3
 800062a:	fa01 f303 	lsl.w	r3, r1, r3
 800062e:	43db      	mvns	r3, r3
 8000630:	401a      	ands	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	791b      	ldrb	r3, [r3, #4]
 800063e:	4619      	mov	r1, r3
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	fa01 f303 	lsl.w	r3, r1, r3
 8000648:	431a      	orrs	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	791b      	ldrb	r3, [r3, #4]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d003      	beq.n	800065e <GPIO_Init+0x76>
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	791b      	ldrb	r3, [r3, #4]
 800065a:	2b02      	cmp	r3, #2
 800065c:	d12e      	bne.n	80006bc <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	689a      	ldr	r2, [r3, #8]
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	2103      	movs	r1, #3
 8000668:	fa01 f303 	lsl.w	r3, r1, r3
 800066c:	43db      	mvns	r3, r3
 800066e:	401a      	ands	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	689a      	ldr	r2, [r3, #8]
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	795b      	ldrb	r3, [r3, #5]
 800067c:	4619      	mov	r1, r3
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	fa01 f303 	lsl.w	r3, r1, r3
 8000686:	431a      	orrs	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	685a      	ldr	r2, [r3, #4]
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	b29b      	uxth	r3, r3
 8000694:	4619      	mov	r1, r3
 8000696:	2301      	movs	r3, #1
 8000698:	408b      	lsls	r3, r1
 800069a:	43db      	mvns	r3, r3
 800069c:	401a      	ands	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	7992      	ldrb	r2, [r2, #6]
 80006aa:	4611      	mov	r1, r2
 80006ac:	697a      	ldr	r2, [r7, #20]
 80006ae:	b292      	uxth	r2, r2
 80006b0:	fa01 f202 	lsl.w	r2, r1, r2
 80006b4:	b292      	uxth	r2, r2
 80006b6:	431a      	orrs	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	68da      	ldr	r2, [r3, #12]
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	2103      	movs	r1, #3
 80006c8:	fa01 f303 	lsl.w	r3, r1, r3
 80006cc:	43db      	mvns	r3, r3
 80006ce:	401a      	ands	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	68da      	ldr	r2, [r3, #12]
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	79db      	ldrb	r3, [r3, #7]
 80006dc:	4619      	mov	r1, r3
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	fa01 f303 	lsl.w	r3, r1, r3
 80006e6:	431a      	orrs	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	3301      	adds	r3, #1
 80006f0:	617b      	str	r3, [r7, #20]
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	2b0f      	cmp	r3, #15
 80006f6:	d985      	bls.n	8000604 <GPIO_Init+0x1c>
    }
  }
}
 80006f8:	bf00      	nop
 80006fa:	371c      	adds	r7, #28
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000710:	78fb      	ldrb	r3, [r7, #3]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d006      	beq.n	8000724 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000716:	490a      	ldr	r1, [pc, #40]	; (8000740 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <RCC_AHB1PeriphClockCmd+0x3c>)
 800071a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4313      	orrs	r3, r2
 8000720:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000722:	e006      	b.n	8000732 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000724:	4906      	ldr	r1, [pc, #24]	; (8000740 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	43db      	mvns	r3, r3
 800072e:	4013      	ands	r3, r2
 8000730:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800

08000744 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	460b      	mov	r3, r1
 800074e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000750:	2300      	movs	r3, #0
 8000752:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	891b      	ldrh	r3, [r3, #8]
 8000758:	b29a      	uxth	r2, r3
 800075a:	887b      	ldrh	r3, [r7, #2]
 800075c:	4013      	ands	r3, r2
 800075e:	b29b      	uxth	r3, r3
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000764:	2301      	movs	r3, #1
 8000766:	73fb      	strb	r3, [r7, #15]
 8000768:	e001      	b.n	800076e <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800076a:	2300      	movs	r3, #0
 800076c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800076e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4a10      	ldr	r2, [pc, #64]	; (80007cc <STM_EVAL_LEDInit+0x50>)
 800078a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078e:	2101      	movs	r1, #1
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ffb7 	bl	8000704 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	4a0d      	ldr	r2, [pc, #52]	; (80007d0 <STM_EVAL_LEDInit+0x54>)
 800079a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800079e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80007a0:	2301      	movs	r3, #1
 80007a2:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80007a4:	2300      	movs	r3, #0
 80007a6:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80007ac:	2302      	movs	r3, #2
 80007ae:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <STM_EVAL_LEDInit+0x58>)
 80007b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b8:	f107 0208 	add.w	r2, r7, #8
 80007bc:	4611      	mov	r1, r2
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ff12 	bl	80005e8 <GPIO_Init>
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	08000e4c 	.word	0x08000e4c
 80007d0:	08000e44 	.word	0x08000e44
 80007d4:	20000000 	.word	0x20000000

080007d8 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <STM_EVAL_LEDOn+0x28>)
 80007e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ea:	79fa      	ldrb	r2, [r7, #7]
 80007ec:	4905      	ldr	r1, [pc, #20]	; (8000804 <STM_EVAL_LEDOn+0x2c>)
 80007ee:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80007f2:	831a      	strh	r2, [r3, #24]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	20000000 	.word	0x20000000
 8000804:	08000e44 	.word	0x08000e44

08000808 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 800080c:	4b35      	ldr	r3, [pc, #212]	; (80008e4 <Audio_MAL_IRQHandler+0xdc>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <Audio_MAL_IRQHandler+0xe0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	4610      	mov	r0, r2
 8000818:	f7ff fd62 	bl	80002e0 <DMA_GetFlagStatus>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d05e      	beq.n	80008e0 <Audio_MAL_IRQHandler+0xd8>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000822:	4b32      	ldr	r3, [pc, #200]	; (80008ec <Audio_MAL_IRQHandler+0xe4>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d04c      	beq.n	80008c4 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800082a:	bf00      	nop
 800082c:	4b2d      	ldr	r3, [pc, #180]	; (80008e4 <Audio_MAL_IRQHandler+0xdc>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fd3d 	bl	80002b0 <DMA_GetCmdStatus>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1f7      	bne.n	800082c <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 800083c:	4b29      	ldr	r3, [pc, #164]	; (80008e4 <Audio_MAL_IRQHandler+0xdc>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <Audio_MAL_IRQHandler+0xe0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4619      	mov	r1, r3
 8000846:	4610      	mov	r0, r2
 8000848:	f7ff fd86 	bl	8000358 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 800084c:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <Audio_MAL_IRQHandler+0xe8>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <Audio_MAL_IRQHandler+0xec>)
 8000854:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000856:	4b25      	ldr	r3, [pc, #148]	; (80008ec <Audio_MAL_IRQHandler+0xe4>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800085e:	4293      	cmp	r3, r2
 8000860:	bf28      	it	cs
 8000862:	4613      	movcs	r3, r2
 8000864:	4a23      	ldr	r2, [pc, #140]	; (80008f4 <Audio_MAL_IRQHandler+0xec>)
 8000866:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000868:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <Audio_MAL_IRQHandler+0xdc>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4921      	ldr	r1, [pc, #132]	; (80008f4 <Audio_MAL_IRQHandler+0xec>)
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fcaa 	bl	80001c8 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000874:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <Audio_MAL_IRQHandler+0xdc>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2101      	movs	r1, #1
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fcfc 	bl	8000278 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <Audio_MAL_IRQHandler+0xe8>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <Audio_MAL_IRQHandler+0xe4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800088c:	d203      	bcs.n	8000896 <Audio_MAL_IRQHandler+0x8e>
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <Audio_MAL_IRQHandler+0xe4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	e000      	b.n	8000898 <Audio_MAL_IRQHandler+0x90>
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <Audio_MAL_IRQHandler+0xf0>)
 8000898:	4413      	add	r3, r2
 800089a:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <Audio_MAL_IRQHandler+0xe8>)
 800089c:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <Audio_MAL_IRQHandler+0xe4>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <Audio_MAL_IRQHandler+0xe4>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008aa:	428b      	cmp	r3, r1
 80008ac:	bf28      	it	cs
 80008ae:	460b      	movcs	r3, r1
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <Audio_MAL_IRQHandler+0xe4>)
 80008b4:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <Audio_MAL_IRQHandler+0xdc>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2101      	movs	r1, #1
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fcdb 	bl	8000278 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80008c2:	e00d      	b.n	80008e0 <Audio_MAL_IRQHandler+0xd8>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <Audio_MAL_IRQHandler+0xdc>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fcd4 	bl	8000278 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <Audio_MAL_IRQHandler+0xdc>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <Audio_MAL_IRQHandler+0xe0>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4619      	mov	r1, r3
 80008da:	4610      	mov	r0, r2
 80008dc:	f7ff fd3c 	bl	8000358 <DMA_ClearFlag>
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000018 	.word	0x20000018
 80008e8:	2000001c 	.word	0x2000001c
 80008ec:	20000010 	.word	0x20000010
 80008f0:	20000054 	.word	0x20000054
 80008f4:	20000094 	.word	0x20000094
 80008f8:	0001fffe 	.word	0x0001fffe

080008fc <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000900:	f7ff ff82 	bl	8000808 <Audio_MAL_IRQHandler>
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}

08000908 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800090c:	f7ff ff7c 	bl	8000808 <Audio_MAL_IRQHandler>
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000918:	2102      	movs	r1, #2
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <SPI3_IRQHandler+0x1c>)
 800091c:	f7ff ff12 	bl	8000744 <SPI_I2S_GetFlagStatus>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SPI3_IRQHandler+0x16>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000926:	4b03      	ldr	r3, [pc, #12]	; (8000934 <SPI3_IRQHandler+0x20>)
 8000928:	681b      	ldr	r3, [r3, #0]
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    //SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack());
  }
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40003c00 	.word	0x40003c00
 8000934:	20000014 	.word	0x20000014

08000938 <main>:
__IO uint32_t uwMemoryProgramStatus = 0;

static uint32_t GetSector(uint32_t Address);

int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  int i = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
  */

  /* TODO - Add your application code here */

  /* Initialize LEDs */
  STM_EVAL_LEDInit(LED3);
 8000942:	2001      	movs	r0, #1
 8000944:	f7ff ff1a 	bl	800077c <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED4);
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff ff17 	bl	800077c <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED5);
 800094e:	2002      	movs	r0, #2
 8000950:	f7ff ff14 	bl	800077c <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED6);
 8000954:	2003      	movs	r0, #3
 8000956:	f7ff ff11 	bl	800077c <STM_EVAL_LEDInit>

  FLASH_Unlock();
 800095a:	f7ff fd2b 	bl	80003b4 <FLASH_Unlock>
  FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 800095e:	20f3      	movs	r0, #243	; 0xf3
 8000960:	f7ff fde4 	bl	800052c <FLASH_ClearFlag>
                    FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR|FLASH_FLAG_PGSERR);

    /* Get the number of the start and end sectors */
    uwStartSector = GetSector(FLASH_USER_START_ADDR);
 8000964:	4841      	ldr	r0, [pc, #260]	; (8000a6c <main+0x134>)
 8000966:	f000 f895 	bl	8000a94 <GetSector>
 800096a:	4602      	mov	r2, r0
 800096c:	4b40      	ldr	r3, [pc, #256]	; (8000a70 <main+0x138>)
 800096e:	601a      	str	r2, [r3, #0]
    uwEndSector = GetSector(FLASH_USER_END_ADDR);
 8000970:	4840      	ldr	r0, [pc, #256]	; (8000a74 <main+0x13c>)
 8000972:	f000 f88f 	bl	8000a94 <GetSector>
 8000976:	4602      	mov	r2, r0
 8000978:	4b3f      	ldr	r3, [pc, #252]	; (8000a78 <main+0x140>)
 800097a:	601a      	str	r2, [r3, #0]

    /* Strat the erase operation */
    uwSectorCounter = uwStartSector;
 800097c:	4b3c      	ldr	r3, [pc, #240]	; (8000a70 <main+0x138>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a3e      	ldr	r2, [pc, #248]	; (8000a7c <main+0x144>)
 8000982:	6013      	str	r3, [r2, #0]
    while (uwSectorCounter <= uwEndSector)
 8000984:	e018      	b.n	80009b8 <main+0x80>
    {
      /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
         be done by word */
      if (FLASH_EraseSector(uwSectorCounter, VoltageRange_3) != FLASH_COMPLETE)
 8000986:	4b3d      	ldr	r3, [pc, #244]	; (8000a7c <main+0x144>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2102      	movs	r1, #2
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fd39 	bl	8000404 <FLASH_EraseSector>
 8000992:	4603      	mov	r3, r0
 8000994:	2b08      	cmp	r3, #8
 8000996:	d000      	beq.n	800099a <main+0x62>
      {
        /* Error occurred while sector erase.
           User can add here some code to deal with this error  */
        while (1)
 8000998:	e7fe      	b.n	8000998 <main+0x60>
        {
        }
      }
      /* jump to the next sector */
      if (uwSectorCounter == FLASH_Sector_11)
 800099a:	4b38      	ldr	r3, [pc, #224]	; (8000a7c <main+0x144>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b58      	cmp	r3, #88	; 0x58
 80009a0:	d105      	bne.n	80009ae <main+0x76>
      {
        uwSectorCounter += 40;
 80009a2:	4b36      	ldr	r3, [pc, #216]	; (8000a7c <main+0x144>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	3328      	adds	r3, #40	; 0x28
 80009a8:	4a34      	ldr	r2, [pc, #208]	; (8000a7c <main+0x144>)
 80009aa:	6013      	str	r3, [r2, #0]
 80009ac:	e004      	b.n	80009b8 <main+0x80>
      }
      else
      {
        uwSectorCounter += 8;
 80009ae:	4b33      	ldr	r3, [pc, #204]	; (8000a7c <main+0x144>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	3308      	adds	r3, #8
 80009b4:	4a31      	ldr	r2, [pc, #196]	; (8000a7c <main+0x144>)
 80009b6:	6013      	str	r3, [r2, #0]
    while (uwSectorCounter <= uwEndSector)
 80009b8:	4b30      	ldr	r3, [pc, #192]	; (8000a7c <main+0x144>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b2e      	ldr	r3, [pc, #184]	; (8000a78 <main+0x140>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d9e0      	bls.n	8000986 <main+0x4e>
    }

    /* Program the user Flash area word by word ********************************/
    /* area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR */

    uwAddress = FLASH_USER_START_ADDR;
 80009c4:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <main+0x148>)
 80009c6:	4a29      	ldr	r2, [pc, #164]	; (8000a6c <main+0x134>)
 80009c8:	601a      	str	r2, [r3, #0]

    while (uwAddress < FLASH_USER_END_ADDR)
 80009ca:	e00f      	b.n	80009ec <main+0xb4>
    {
      if (FLASH_ProgramWord(uwAddress, DATA_32) == FLASH_COMPLETE)
 80009cc:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <main+0x148>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	492c      	ldr	r1, [pc, #176]	; (8000a84 <main+0x14c>)
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fd76 	bl	80004c4 <FLASH_ProgramWord>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b08      	cmp	r3, #8
 80009dc:	d105      	bne.n	80009ea <main+0xb2>
      {
        uwAddress = uwAddress + 4;
 80009de:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <main+0x148>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	3304      	adds	r3, #4
 80009e4:	4a26      	ldr	r2, [pc, #152]	; (8000a80 <main+0x148>)
 80009e6:	6013      	str	r3, [r2, #0]
 80009e8:	e000      	b.n	80009ec <main+0xb4>
      }
      else
      {
        /* Error occurred while writing data in Flash memory.
           User can add here some code to deal with this error */
        while (1)
 80009ea:	e7fe      	b.n	80009ea <main+0xb2>
    while (uwAddress < FLASH_USER_END_ADDR)
 80009ec:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <main+0x148>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a25      	ldr	r2, [pc, #148]	; (8000a88 <main+0x150>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d9ea      	bls.n	80009cc <main+0x94>
      }
    }

    /* Lock the Flash to disable the flash control register access (recommended
       to protect the FLASH memory against possible unwanted operation) */
    FLASH_Lock();
 80009f6:	f7ff fcf5 	bl	80003e4 <FLASH_Lock>


    /* Check if the programmed data is OK ***************************************/
    /*  MemoryProgramStatus = 0: data programmed correctly
        MemoryProgramStatus != 0: number of words not programmed correctly */
    uwAddress = FLASH_USER_START_ADDR;
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <main+0x148>)
 80009fc:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <main+0x134>)
 80009fe:	601a      	str	r2, [r3, #0]
    uwMemoryProgramStatus = 0;
 8000a00:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <main+0x154>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]

    while (uwAddress < FLASH_USER_END_ADDR)
 8000a06:	e013      	b.n	8000a30 <main+0xf8>
    {
      uwData32 = *(__IO uint32_t*)uwAddress;
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <main+0x148>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a20      	ldr	r2, [pc, #128]	; (8000a90 <main+0x158>)
 8000a10:	6013      	str	r3, [r2, #0]

      if (uwData32 != DATA_32)
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <main+0x158>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <main+0x14c>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d004      	beq.n	8000a26 <main+0xee>
      {
        uwMemoryProgramStatus++;
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <main+0x154>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	4a1a      	ldr	r2, [pc, #104]	; (8000a8c <main+0x154>)
 8000a24:	6013      	str	r3, [r2, #0]
      }

      uwAddress = uwAddress + 4;
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <main+0x148>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	3304      	adds	r3, #4
 8000a2c:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <main+0x148>)
 8000a2e:	6013      	str	r3, [r2, #0]
    while (uwAddress < FLASH_USER_END_ADDR)
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <main+0x148>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <main+0x150>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d9e6      	bls.n	8000a08 <main+0xd0>
    }

    /* Check Data correctness */
    if(uwMemoryProgramStatus)
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <main+0x154>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d003      	beq.n	8000a4a <main+0x112>
    {
      /* KO */
      /* Turn on LD2 */
      STM_EVAL_LEDOn(LED5);
 8000a42:	2002      	movs	r0, #2
 8000a44:	f7ff fec8 	bl	80007d8 <STM_EVAL_LEDOn>
 8000a48:	e00b      	b.n	8000a62 <main+0x12a>
    }
    else
    {
      /* OK */
      /* Turn on LD1 */
      STM_EVAL_LEDOn(LED3);
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f7ff fec4 	bl	80007d8 <STM_EVAL_LEDOn>
      STM_EVAL_LEDOn(LED5);
 8000a50:	2002      	movs	r0, #2
 8000a52:	f7ff fec1 	bl	80007d8 <STM_EVAL_LEDOn>
      STM_EVAL_LEDOn(LED4);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff febe 	bl	80007d8 <STM_EVAL_LEDOn>
      STM_EVAL_LEDOn(LED6);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f7ff febb 	bl	80007d8 <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED6);

  /* Infinite loop */
  while (1)
  {
	i++;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3301      	adds	r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	e7fb      	b.n	8000a62 <main+0x12a>
 8000a6a:	bf00      	nop
 8000a6c:	08010000 	.word	0x08010000
 8000a70:	2000003c 	.word	0x2000003c
 8000a74:	080e0000 	.word	0x080e0000
 8000a78:	20000040 	.word	0x20000040
 8000a7c:	20000048 	.word	0x20000048
 8000a80:	20000044 	.word	0x20000044
 8000a84:	12345678 	.word	0x12345678
 8000a88:	080dffff 	.word	0x080dffff
 8000a8c:	20000050 	.word	0x20000050
 8000a90:	2000004c 	.word	0x2000004c

08000a94 <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  None
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a40      	ldr	r2, [pc, #256]	; (8000ba4 <GetSector+0x110>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d806      	bhi.n	8000ab6 <GetSector+0x22>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000aae:	d302      	bcc.n	8000ab6 <GetSector+0x22>
  {
    sector = FLASH_Sector_0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	e06f      	b.n	8000b96 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a3b      	ldr	r2, [pc, #236]	; (8000ba8 <GetSector+0x114>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d806      	bhi.n	8000acc <GetSector+0x38>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a38      	ldr	r2, [pc, #224]	; (8000ba4 <GetSector+0x110>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d902      	bls.n	8000acc <GetSector+0x38>
  {
    sector = FLASH_Sector_1;
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	e064      	b.n	8000b96 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a37      	ldr	r2, [pc, #220]	; (8000bac <GetSector+0x118>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d806      	bhi.n	8000ae2 <GetSector+0x4e>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a34      	ldr	r2, [pc, #208]	; (8000ba8 <GetSector+0x114>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d902      	bls.n	8000ae2 <GetSector+0x4e>
  {
    sector = FLASH_Sector_2;
 8000adc:	2310      	movs	r3, #16
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	e059      	b.n	8000b96 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a32      	ldr	r2, [pc, #200]	; (8000bb0 <GetSector+0x11c>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d806      	bhi.n	8000af8 <GetSector+0x64>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a2f      	ldr	r2, [pc, #188]	; (8000bac <GetSector+0x118>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d902      	bls.n	8000af8 <GetSector+0x64>
  {
    sector = FLASH_Sector_3;
 8000af2:	2318      	movs	r3, #24
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	e04e      	b.n	8000b96 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a2e      	ldr	r2, [pc, #184]	; (8000bb4 <GetSector+0x120>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d806      	bhi.n	8000b0e <GetSector+0x7a>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a2b      	ldr	r2, [pc, #172]	; (8000bb0 <GetSector+0x11c>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d902      	bls.n	8000b0e <GetSector+0x7a>
  {
    sector = FLASH_Sector_4;
 8000b08:	2320      	movs	r3, #32
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	e043      	b.n	8000b96 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a29      	ldr	r2, [pc, #164]	; (8000bb8 <GetSector+0x124>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d806      	bhi.n	8000b24 <GetSector+0x90>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a26      	ldr	r2, [pc, #152]	; (8000bb4 <GetSector+0x120>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d902      	bls.n	8000b24 <GetSector+0x90>
  {
    sector = FLASH_Sector_5;
 8000b1e:	2328      	movs	r3, #40	; 0x28
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	e038      	b.n	8000b96 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a25      	ldr	r2, [pc, #148]	; (8000bbc <GetSector+0x128>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d806      	bhi.n	8000b3a <GetSector+0xa6>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a22      	ldr	r2, [pc, #136]	; (8000bb8 <GetSector+0x124>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d902      	bls.n	8000b3a <GetSector+0xa6>
  {
    sector = FLASH_Sector_6;
 8000b34:	2330      	movs	r3, #48	; 0x30
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	e02d      	b.n	8000b96 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a20      	ldr	r2, [pc, #128]	; (8000bc0 <GetSector+0x12c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d806      	bhi.n	8000b50 <GetSector+0xbc>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a1d      	ldr	r2, [pc, #116]	; (8000bbc <GetSector+0x128>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d902      	bls.n	8000b50 <GetSector+0xbc>
  {
    sector = FLASH_Sector_7;
 8000b4a:	2338      	movs	r3, #56	; 0x38
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	e022      	b.n	8000b96 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <GetSector+0x130>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d806      	bhi.n	8000b66 <GetSector+0xd2>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <GetSector+0x12c>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d902      	bls.n	8000b66 <GetSector+0xd2>
  {
    sector = FLASH_Sector_8;
 8000b60:	2340      	movs	r3, #64	; 0x40
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	e017      	b.n	8000b96 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <GetSector+0x134>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d806      	bhi.n	8000b7c <GetSector+0xe8>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <GetSector+0x130>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d902      	bls.n	8000b7c <GetSector+0xe8>
  {
    sector = FLASH_Sector_9;
 8000b76:	2348      	movs	r3, #72	; 0x48
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	e00c      	b.n	8000b96 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a13      	ldr	r2, [pc, #76]	; (8000bcc <GetSector+0x138>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d806      	bhi.n	8000b92 <GetSector+0xfe>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <GetSector+0x134>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d902      	bls.n	8000b92 <GetSector+0xfe>
  {
    sector = FLASH_Sector_10;
 8000b8c:	2350      	movs	r3, #80	; 0x50
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	e001      	b.n	8000b96 <GetSector+0x102>
  }
  else/*(Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11))*/
  {
    sector = FLASH_Sector_11;
 8000b92:	2358      	movs	r3, #88	; 0x58
 8000b94:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 8000b96:	68fb      	ldr	r3, [r7, #12]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	08003fff 	.word	0x08003fff
 8000ba8:	08007fff 	.word	0x08007fff
 8000bac:	0800bfff 	.word	0x0800bfff
 8000bb0:	0800ffff 	.word	0x0800ffff
 8000bb4:	0801ffff 	.word	0x0801ffff
 8000bb8:	0803ffff 	.word	0x0803ffff
 8000bbc:	0805ffff 	.word	0x0805ffff
 8000bc0:	0807ffff 	.word	0x0807ffff
 8000bc4:	0809ffff 	.word	0x0809ffff
 8000bc8:	080bffff 	.word	0x080bffff
 8000bcc:	080dffff 	.word	0x080dffff

08000bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bd6:	e003      	b.n	8000be0 <LoopCopyDataInit>

08000bd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bdc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bde:	3104      	adds	r1, #4

08000be0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000be0:	480b      	ldr	r0, [pc, #44]	; (8000c10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000be4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000be6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000be8:	d3f6      	bcc.n	8000bd8 <CopyDataInit>
  ldr  r2, =_sbss
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bec:	e002      	b.n	8000bf4 <LoopFillZerobss>

08000bee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bf0:	f842 3b04 	str.w	r3, [r2], #4

08000bf4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bf6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bf8:	d3f9      	bcc.n	8000bee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bfa:	f000 f841 	bl	8000c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f000 f8f1 	bl	8000de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c02:	f7ff fe99 	bl	8000938 <main>
  bx  lr    
 8000c06:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c08:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c0c:	08000e64 	.word	0x08000e64
  ldr  r0, =_sdata
 8000c10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c14:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8000c18:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8000c1c:	200000d0 	.word	0x200000d0

08000c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC_IRQHandler>

08000c22 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <HardFault_Handler+0x4>

08000c36 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <MemManage_Handler+0x4>

08000c3c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <BusFault_Handler+0x4>

08000c42 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <UsageFault_Handler+0x4>

08000c48 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c84:	4a16      	ldr	r2, [pc, #88]	; (8000ce0 <SystemInit+0x60>)
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <SystemInit+0x60>)
 8000c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c94:	4a13      	ldr	r2, [pc, #76]	; (8000ce4 <SystemInit+0x64>)
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <SystemInit+0x64>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <SystemInit+0x64>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ca6:	4a0f      	ldr	r2, [pc, #60]	; (8000ce4 <SystemInit+0x64>)
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <SystemInit+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cb4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <SystemInit+0x64>)
 8000cb8:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <SystemInit+0x68>)
 8000cba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000cbc:	4a09      	ldr	r2, [pc, #36]	; (8000ce4 <SystemInit+0x64>)
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <SystemInit+0x64>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <SystemInit+0x64>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000cce:	f000 f80d 	bl	8000cec <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cd2:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <SystemInit+0x60>)
 8000cd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cd8:	609a      	str	r2, [r3, #8]
#endif
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	24003010 	.word	0x24003010

08000cec <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000cfa:	4a36      	ldr	r2, [pc, #216]	; (8000dd4 <SetSysClock+0xe8>)
 8000cfc:	4b35      	ldr	r3, [pc, #212]	; (8000dd4 <SetSysClock+0xe8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d04:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000d06:	4b33      	ldr	r3, [pc, #204]	; (8000dd4 <SetSysClock+0xe8>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3301      	adds	r3, #1
 8000d14:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d103      	bne.n	8000d24 <SetSysClock+0x38>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000d22:	d1f0      	bne.n	8000d06 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000d24:	4b2b      	ldr	r3, [pc, #172]	; (8000dd4 <SetSysClock+0xe8>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d002      	beq.n	8000d36 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000d30:	2301      	movs	r3, #1
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	e001      	b.n	8000d3a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d142      	bne.n	8000dc6 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000d40:	4a24      	ldr	r2, [pc, #144]	; (8000dd4 <SetSysClock+0xe8>)
 8000d42:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <SetSysClock+0xe8>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000d4c:	4a22      	ldr	r2, [pc, #136]	; (8000dd8 <SetSysClock+0xec>)
 8000d4e:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <SetSysClock+0xec>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d56:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000d58:	4a1e      	ldr	r2, [pc, #120]	; (8000dd4 <SetSysClock+0xe8>)
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <SetSysClock+0xe8>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000d60:	4a1c      	ldr	r2, [pc, #112]	; (8000dd4 <SetSysClock+0xe8>)
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <SetSysClock+0xe8>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d6a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000d6c:	4a19      	ldr	r2, [pc, #100]	; (8000dd4 <SetSysClock+0xe8>)
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <SetSysClock+0xe8>)
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000d76:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <SetSysClock+0xe8>)
 8000d7a:	4a18      	ldr	r2, [pc, #96]	; (8000ddc <SetSysClock+0xf0>)
 8000d7c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000d7e:	4a15      	ldr	r2, [pc, #84]	; (8000dd4 <SetSysClock+0xe8>)
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <SetSysClock+0xe8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d88:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000d8a:	bf00      	nop
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <SetSysClock+0xe8>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0f9      	beq.n	8000d8c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <SetSysClock+0xf4>)
 8000d9a:	f240 6205 	movw	r2, #1541	; 0x605
 8000d9e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000da0:	4a0c      	ldr	r2, [pc, #48]	; (8000dd4 <SetSysClock+0xe8>)
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <SetSysClock+0xe8>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f023 0303 	bic.w	r3, r3, #3
 8000daa:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000dac:	4a09      	ldr	r2, [pc, #36]	; (8000dd4 <SetSysClock+0xe8>)
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <SetSysClock+0xe8>)
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	f043 0302 	orr.w	r3, r3, #2
 8000db6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000db8:	bf00      	nop
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <SetSysClock+0xe8>)
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	f003 030c 	and.w	r3, r3, #12
 8000dc2:	2b08      	cmp	r3, #8
 8000dc4:	d1f9      	bne.n	8000dba <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40007000 	.word	0x40007000
 8000ddc:	07405408 	.word	0x07405408
 8000de0:	40023c00 	.word	0x40023c00

08000de4 <__libc_init_array>:
 8000de4:	b570      	push	{r4, r5, r6, lr}
 8000de6:	4e0d      	ldr	r6, [pc, #52]	; (8000e1c <__libc_init_array+0x38>)
 8000de8:	4c0d      	ldr	r4, [pc, #52]	; (8000e20 <__libc_init_array+0x3c>)
 8000dea:	1ba4      	subs	r4, r4, r6
 8000dec:	10a4      	asrs	r4, r4, #2
 8000dee:	2500      	movs	r5, #0
 8000df0:	42a5      	cmp	r5, r4
 8000df2:	d109      	bne.n	8000e08 <__libc_init_array+0x24>
 8000df4:	4e0b      	ldr	r6, [pc, #44]	; (8000e24 <__libc_init_array+0x40>)
 8000df6:	4c0c      	ldr	r4, [pc, #48]	; (8000e28 <__libc_init_array+0x44>)
 8000df8:	f000 f818 	bl	8000e2c <_init>
 8000dfc:	1ba4      	subs	r4, r4, r6
 8000dfe:	10a4      	asrs	r4, r4, #2
 8000e00:	2500      	movs	r5, #0
 8000e02:	42a5      	cmp	r5, r4
 8000e04:	d105      	bne.n	8000e12 <__libc_init_array+0x2e>
 8000e06:	bd70      	pop	{r4, r5, r6, pc}
 8000e08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e0c:	4798      	blx	r3
 8000e0e:	3501      	adds	r5, #1
 8000e10:	e7ee      	b.n	8000df0 <__libc_init_array+0xc>
 8000e12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e16:	4798      	blx	r3
 8000e18:	3501      	adds	r5, #1
 8000e1a:	e7f2      	b.n	8000e02 <__libc_init_array+0x1e>
 8000e1c:	08000e5c 	.word	0x08000e5c
 8000e20:	08000e5c 	.word	0x08000e5c
 8000e24:	08000e5c 	.word	0x08000e5c
 8000e28:	08000e60 	.word	0x08000e60

08000e2c <_init>:
 8000e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e2e:	bf00      	nop
 8000e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e32:	bc08      	pop	{r3}
 8000e34:	469e      	mov	lr, r3
 8000e36:	4770      	bx	lr

08000e38 <_fini>:
 8000e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e3a:	bf00      	nop
 8000e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e3e:	bc08      	pop	{r3}
 8000e40:	469e      	mov	lr, r3
 8000e42:	4770      	bx	lr
