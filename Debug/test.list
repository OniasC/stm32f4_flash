
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000104c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080011d4  080011d4  000111d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080011ec  080011ec  000111ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080011f0  080011f0  000111f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  080011f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
  7 .bss          000000a8  20000024  20000024  00020024  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000cc  200000cc  00020024  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 10 .debug_info   00005d1f  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000146a  00000000  00000000  00025d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000800  00000000  00000000  000271e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000728  00000000  00000000  000279e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002f87  00000000  00000000  00028108  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002a0c  00000000  00000000  0002b08f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002da9b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002010  00000000  00000000  0002db18  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002fb28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080011bc 	.word	0x080011bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	080011bc 	.word	0x080011bc

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	4b25      	ldr	r3, [pc, #148]	; (8000338 <DMA_Init+0xac>)
 80002a4:	4013      	ands	r3, r2
 80002a6:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002b6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002c2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	6a1b      	ldr	r3, [r3, #32]
 80002c8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002ce:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002d4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80002da:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80002e0:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	4313      	orrs	r3, r2
 80002e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	68fa      	ldr	r2, [r7, #12]
 80002ec:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	f023 0307 	bic.w	r3, r3, #7
 80002fa:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000304:	4313      	orrs	r3, r2
 8000306:	68fa      	ldr	r2, [r7, #12]
 8000308:	4313      	orrs	r3, r2
 800030a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	68fa      	ldr	r2, [r7, #12]
 8000310:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	691a      	ldr	r2, [r3, #16]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	685a      	ldr	r2, [r3, #4]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	689a      	ldr	r2, [r3, #8]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	60da      	str	r2, [r3, #12]
}
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	f01c803f 	.word	0xf01c803f

0800033c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	460b      	mov	r3, r1
 8000346:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000348:	78fb      	ldrb	r3, [r7, #3]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d006      	beq.n	800035c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f043 0201 	orr.w	r2, r3, #1
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800035a:	e005      	b.n	8000368 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f023 0201 	bic.w	r2, r3, #1
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	601a      	str	r2, [r3, #0]
}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800037c:	2300      	movs	r3, #0
 800037e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f003 0301 	and.w	r3, r3, #1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d002      	beq.n	8000392 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800038c:	2301      	movs	r3, #1
 800038e:	73fb      	strb	r3, [r7, #15]
 8000390:	e001      	b.n	8000396 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000392:	2300      	movs	r3, #0
 8000394:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000396:	7bfb      	ldrb	r3, [r7, #15]
}
 8000398:	4618      	mov	r0, r3
 800039a:	3714      	adds	r7, #20
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b087      	sub	sp, #28
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80003ae:	2300      	movs	r3, #0
 80003b0:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a15      	ldr	r2, [pc, #84]	; (8000410 <DMA_GetFlagStatus+0x6c>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d802      	bhi.n	80003c4 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003be:	4b15      	ldr	r3, [pc, #84]	; (8000414 <DMA_GetFlagStatus+0x70>)
 80003c0:	613b      	str	r3, [r7, #16]
 80003c2:	e001      	b.n	80003c8 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003c4:	4b14      	ldr	r3, [pc, #80]	; (8000418 <DMA_GetFlagStatus+0x74>)
 80003c6:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d003      	beq.n	80003da <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80003d2:	693b      	ldr	r3, [r7, #16]
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	e002      	b.n	80003e0 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003e6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003ea:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80003ec:	68fa      	ldr	r2, [r7, #12]
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	4013      	ands	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d002      	beq.n	80003fc <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80003f6:	2301      	movs	r3, #1
 80003f8:	75fb      	strb	r3, [r7, #23]
 80003fa:	e001      	b.n	8000400 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80003fc:	2300      	movs	r3, #0
 80003fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000400:	7dfb      	ldrb	r3, [r7, #23]
}
 8000402:	4618      	mov	r0, r3
 8000404:	371c      	adds	r7, #28
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	4002640f 	.word	0x4002640f
 8000414:	40026000 	.word	0x40026000
 8000418:	40026400 	.word	0x40026400

0800041c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a10      	ldr	r2, [pc, #64]	; (800046c <DMA_ClearFlag+0x50>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d802      	bhi.n	8000434 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <DMA_ClearFlag+0x54>)
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	e001      	b.n	8000438 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000434:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <DMA_ClearFlag+0x58>)
 8000436:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800043e:	2b00      	cmp	r3, #0
 8000440:	d007      	beq.n	8000452 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000448:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800044c:	68fa      	ldr	r2, [r7, #12]
 800044e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000450:	e006      	b.n	8000460 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000458:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800045c:	68fa      	ldr	r2, [r7, #12]
 800045e:	6093      	str	r3, [r2, #8]
}
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	4002640f 	.word	0x4002640f
 8000470:	40026000 	.word	0x40026000
 8000474:	40026400 	.word	0x40026400

08000478 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000484:	4b34      	ldr	r3, [pc, #208]	; (8000558 <EXTI_Init+0xe0>)
 8000486:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	799b      	ldrb	r3, [r3, #6]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d04f      	beq.n	8000530 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000490:	4931      	ldr	r1, [pc, #196]	; (8000558 <EXTI_Init+0xe0>)
 8000492:	4b31      	ldr	r3, [pc, #196]	; (8000558 <EXTI_Init+0xe0>)
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	43db      	mvns	r3, r3
 800049c:	4013      	ands	r3, r2
 800049e:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80004a0:	492d      	ldr	r1, [pc, #180]	; (8000558 <EXTI_Init+0xe0>)
 80004a2:	4b2d      	ldr	r3, [pc, #180]	; (8000558 <EXTI_Init+0xe0>)
 80004a4:	685a      	ldr	r2, [r3, #4]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	43db      	mvns	r3, r3
 80004ac:	4013      	ands	r3, r2
 80004ae:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	791b      	ldrb	r3, [r3, #4]
 80004b4:	461a      	mov	r2, r3
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	4413      	add	r3, r2
 80004ba:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	68fa      	ldr	r2, [r7, #12]
 80004c0:	6811      	ldr	r1, [r2, #0]
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	6812      	ldr	r2, [r2, #0]
 80004c6:	430a      	orrs	r2, r1
 80004c8:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80004ca:	4923      	ldr	r1, [pc, #140]	; (8000558 <EXTI_Init+0xe0>)
 80004cc:	4b22      	ldr	r3, [pc, #136]	; (8000558 <EXTI_Init+0xe0>)
 80004ce:	689a      	ldr	r2, [r3, #8]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	43db      	mvns	r3, r3
 80004d6:	4013      	ands	r3, r2
 80004d8:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80004da:	491f      	ldr	r1, [pc, #124]	; (8000558 <EXTI_Init+0xe0>)
 80004dc:	4b1e      	ldr	r3, [pc, #120]	; (8000558 <EXTI_Init+0xe0>)
 80004de:	68da      	ldr	r2, [r3, #12]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	43db      	mvns	r3, r3
 80004e6:	4013      	ands	r3, r2
 80004e8:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	795b      	ldrb	r3, [r3, #5]
 80004ee:	2b10      	cmp	r3, #16
 80004f0:	d10e      	bne.n	8000510 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80004f2:	4919      	ldr	r1, [pc, #100]	; (8000558 <EXTI_Init+0xe0>)
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <EXTI_Init+0xe0>)
 80004f6:	689a      	ldr	r2, [r3, #8]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4313      	orrs	r3, r2
 80004fe:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000500:	4915      	ldr	r1, [pc, #84]	; (8000558 <EXTI_Init+0xe0>)
 8000502:	4b15      	ldr	r3, [pc, #84]	; (8000558 <EXTI_Init+0xe0>)
 8000504:	68da      	ldr	r2, [r3, #12]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4313      	orrs	r3, r2
 800050c:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800050e:	e01d      	b.n	800054c <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <EXTI_Init+0xe0>)
 8000512:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	795b      	ldrb	r3, [r3, #5]
 8000518:	461a      	mov	r2, r3
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	4413      	add	r3, r2
 800051e:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	6811      	ldr	r1, [r2, #0]
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	6812      	ldr	r2, [r2, #0]
 800052a:	430a      	orrs	r2, r1
 800052c:	601a      	str	r2, [r3, #0]
}
 800052e:	e00d      	b.n	800054c <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	791b      	ldrb	r3, [r3, #4]
 8000534:	461a      	mov	r2, r3
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	4413      	add	r3, r2
 800053a:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	68fa      	ldr	r2, [r7, #12]
 8000540:	6811      	ldr	r1, [r2, #0]
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	6812      	ldr	r2, [r2, #0]
 8000546:	43d2      	mvns	r2, r2
 8000548:	400a      	ands	r2, r1
 800054a:	601a      	str	r2, [r3, #0]
}
 800054c:	bf00      	nop
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	40013c00 	.word	0x40013c00

0800055c <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <FLASH_Unlock+0x24>)
 8000562:	691b      	ldr	r3, [r3, #16]
 8000564:	2b00      	cmp	r3, #0
 8000566:	da05      	bge.n	8000574 <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <FLASH_Unlock+0x24>)
 800056a:	4a06      	ldr	r2, [pc, #24]	; (8000584 <FLASH_Unlock+0x28>)
 800056c:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 800056e:	4b04      	ldr	r3, [pc, #16]	; (8000580 <FLASH_Unlock+0x24>)
 8000570:	4a05      	ldr	r2, [pc, #20]	; (8000588 <FLASH_Unlock+0x2c>)
 8000572:	605a      	str	r2, [r3, #4]
  }  
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40023c00 	.word	0x40023c00
 8000584:	45670123 	.word	0x45670123
 8000588:	cdef89ab 	.word	0xcdef89ab

0800058c <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000590:	4a05      	ldr	r2, [pc, #20]	; (80005a8 <FLASH_Lock+0x1c>)
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <FLASH_Lock+0x1c>)
 8000594:	691b      	ldr	r3, [r3, #16]
 8000596:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800059a:	6113      	str	r3, [r2, #16]
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40023c00 	.word	0x40023c00

080005ac <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 80005bc:	2308      	movs	r3, #8
 80005be:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 80005c0:	78fb      	ldrb	r3, [r7, #3]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d102      	bne.n	80005cc <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	e010      	b.n	80005ee <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 80005cc:	78fb      	ldrb	r3, [r7, #3]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d103      	bne.n	80005da <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80005d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	e009      	b.n	80005ee <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 80005da:	78fb      	ldrb	r3, [r7, #3]
 80005dc:	2b02      	cmp	r3, #2
 80005de:	d103      	bne.n	80005e8 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80005e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	e002      	b.n	80005ee <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80005e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005ec:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80005ee:	f000 f8b7 	bl	8000760 <FLASH_WaitForLastOperation>
 80005f2:	4603      	mov	r3, r0
 80005f4:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 80005f6:	7afb      	ldrb	r3, [r7, #11]
 80005f8:	2b08      	cmp	r3, #8
 80005fa:	d12f      	bne.n	800065c <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 80005fc:	4a1a      	ldr	r2, [pc, #104]	; (8000668 <FLASH_EraseSector+0xbc>)
 80005fe:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <FLASH_EraseSector+0xbc>)
 8000600:	691b      	ldr	r3, [r3, #16]
 8000602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000606:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 8000608:	4917      	ldr	r1, [pc, #92]	; (8000668 <FLASH_EraseSector+0xbc>)
 800060a:	4b17      	ldr	r3, [pc, #92]	; (8000668 <FLASH_EraseSector+0xbc>)
 800060c:	691a      	ldr	r2, [r3, #16]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	4313      	orrs	r3, r2
 8000612:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 8000614:	4a14      	ldr	r2, [pc, #80]	; (8000668 <FLASH_EraseSector+0xbc>)
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <FLASH_EraseSector+0xbc>)
 8000618:	691b      	ldr	r3, [r3, #16]
 800061a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800061e:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8000620:	4911      	ldr	r1, [pc, #68]	; (8000668 <FLASH_EraseSector+0xbc>)
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <FLASH_EraseSector+0xbc>)
 8000624:	691a      	ldr	r2, [r3, #16]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4313      	orrs	r3, r2
 800062a:	f043 0302 	orr.w	r3, r3, #2
 800062e:	610b      	str	r3, [r1, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8000630:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <FLASH_EraseSector+0xbc>)
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <FLASH_EraseSector+0xbc>)
 8000634:	691b      	ldr	r3, [r3, #16]
 8000636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800063a:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800063c:	f000 f890 	bl	8000760 <FLASH_WaitForLastOperation>
 8000640:	4603      	mov	r3, r0
 8000642:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8000644:	4a08      	ldr	r2, [pc, #32]	; (8000668 <FLASH_EraseSector+0xbc>)
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <FLASH_EraseSector+0xbc>)
 8000648:	691b      	ldr	r3, [r3, #16]
 800064a:	f023 0302 	bic.w	r3, r3, #2
 800064e:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 8000650:	4a05      	ldr	r2, [pc, #20]	; (8000668 <FLASH_EraseSector+0xbc>)
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <FLASH_EraseSector+0xbc>)
 8000654:	691b      	ldr	r3, [r3, #16]
 8000656:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800065a:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 800065c:	7afb      	ldrb	r3, [r7, #11]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023c00 	.word	0x40023c00

0800066c <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 8000676:	2308      	movs	r3, #8
 8000678:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800067a:	f000 f871 	bl	8000760 <FLASH_WaitForLastOperation>
 800067e:	4603      	mov	r3, r0
 8000680:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	2b08      	cmp	r3, #8
 8000686:	d11e      	bne.n	80006c6 <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8000688:	4a11      	ldr	r2, [pc, #68]	; (80006d0 <FLASH_ProgramWord+0x64>)
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <FLASH_ProgramWord+0x64>)
 800068c:	691b      	ldr	r3, [r3, #16]
 800068e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000692:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8000694:	4a0e      	ldr	r2, [pc, #56]	; (80006d0 <FLASH_ProgramWord+0x64>)
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <FLASH_ProgramWord+0x64>)
 8000698:	691b      	ldr	r3, [r3, #16]
 800069a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800069e:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 80006a0:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <FLASH_ProgramWord+0x64>)
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <FLASH_ProgramWord+0x64>)
 80006a4:	691b      	ldr	r3, [r3, #16]
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	6113      	str	r3, [r2, #16]
  
    *(__IO uint32_t*)Address = Data;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80006b2:	f000 f855 	bl	8000760 <FLASH_WaitForLastOperation>
 80006b6:	4603      	mov	r3, r0
 80006b8:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80006ba:	4a05      	ldr	r2, [pc, #20]	; (80006d0 <FLASH_ProgramWord+0x64>)
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <FLASH_ProgramWord+0x64>)
 80006be:	691b      	ldr	r3, [r3, #16]
 80006c0:	f023 0301 	bic.w	r3, r3, #1
 80006c4:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023c00 	.word	0x40023c00

080006d4 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag  
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 80006dc:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <FLASH_ClearFlag+0x1c>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	60d3      	str	r3, [r2, #12]
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40023c00 	.word	0x40023c00

080006f4 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 80006fa:	2308      	movs	r3, #8
 80006fc:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <FLASH_GetStatus+0x68>)
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800070a:	d102      	bne.n	8000712 <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY;
 800070c:	2301      	movs	r3, #1
 800070e:	71fb      	strb	r3, [r7, #7]
 8000710:	e01c      	b.n	800074c <FLASH_GetStatus+0x58>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <FLASH_GetStatus+0x68>)
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	f003 0310 	and.w	r3, r3, #16
 800071a:	2b00      	cmp	r3, #0
 800071c:	d002      	beq.n	8000724 <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP;
 800071e:	2305      	movs	r3, #5
 8000720:	71fb      	strb	r3, [r7, #7]
 8000722:	e013      	b.n	800074c <FLASH_GetStatus+0x58>
    }
    else
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <FLASH_GetStatus+0x68>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800072c:	2b00      	cmp	r3, #0
 800072e:	d002      	beq.n	8000736 <FLASH_GetStatus+0x42>
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
 8000730:	2306      	movs	r3, #6
 8000732:	71fb      	strb	r3, [r7, #7]
 8000734:	e00a      	b.n	800074c <FLASH_GetStatus+0x58>
      }
      else
      {
        if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <FLASH_GetStatus+0x68>)
 8000738:	68db      	ldr	r3, [r3, #12]
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	2b00      	cmp	r3, #0
 8000740:	d002      	beq.n	8000748 <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_OPERATION;
 8000742:	2307      	movs	r3, #7
 8000744:	71fb      	strb	r3, [r7, #7]
 8000746:	e001      	b.n	800074c <FLASH_GetStatus+0x58>
        }
        else
        {
          flashstatus = FLASH_COMPLETE;
 8000748:	2308      	movs	r3, #8
 800074a:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 800074c:	79fb      	ldrb	r3, [r7, #7]
}
 800074e:	4618      	mov	r0, r3
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40023c00 	.word	0x40023c00

08000760 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 8000766:	2308      	movs	r3, #8
 8000768:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 800076a:	f7ff ffc3 	bl	80006f4 <FLASH_GetStatus>
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8000772:	e003      	b.n	800077c <FLASH_WaitForLastOperation+0x1c>
  {
    status = FLASH_GetStatus();
 8000774:	f7ff ffbe 	bl	80006f4 <FLASH_GetStatus>
 8000778:	4603      	mov	r3, r0
 800077a:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b01      	cmp	r3, #1
 8000782:	d0f7      	beq.n	8000774 <FLASH_WaitForLastOperation+0x14>
  }
  /* Return the operation status */
  return status;
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	b2db      	uxtb	r3, r3
}
 8000788:	4618      	mov	r0, r3
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000790:	b480      	push	{r7}
 8000792:	b087      	sub	sp, #28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	e076      	b.n	800089a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80007ac:	2201      	movs	r2, #1
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	4013      	ands	r3, r2
 80007be:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80007c0:	68fa      	ldr	r2, [r7, #12]
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d165      	bne.n	8000894 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	2103      	movs	r1, #3
 80007d2:	fa01 f303 	lsl.w	r3, r1, r3
 80007d6:	43db      	mvns	r3, r3
 80007d8:	401a      	ands	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	791b      	ldrb	r3, [r3, #4]
 80007e6:	4619      	mov	r1, r3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	fa01 f303 	lsl.w	r3, r1, r3
 80007f0:	431a      	orrs	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	791b      	ldrb	r3, [r3, #4]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d003      	beq.n	8000806 <GPIO_Init+0x76>
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	791b      	ldrb	r3, [r3, #4]
 8000802:	2b02      	cmp	r3, #2
 8000804:	d12e      	bne.n	8000864 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	689a      	ldr	r2, [r3, #8]
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	2103      	movs	r1, #3
 8000810:	fa01 f303 	lsl.w	r3, r1, r3
 8000814:	43db      	mvns	r3, r3
 8000816:	401a      	ands	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	689a      	ldr	r2, [r3, #8]
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	795b      	ldrb	r3, [r3, #5]
 8000824:	4619      	mov	r1, r3
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	fa01 f303 	lsl.w	r3, r1, r3
 800082e:	431a      	orrs	r2, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	685a      	ldr	r2, [r3, #4]
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	b29b      	uxth	r3, r3
 800083c:	4619      	mov	r1, r3
 800083e:	2301      	movs	r3, #1
 8000840:	408b      	lsls	r3, r1
 8000842:	43db      	mvns	r3, r3
 8000844:	401a      	ands	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	683a      	ldr	r2, [r7, #0]
 8000850:	7992      	ldrb	r2, [r2, #6]
 8000852:	4611      	mov	r1, r2
 8000854:	697a      	ldr	r2, [r7, #20]
 8000856:	b292      	uxth	r2, r2
 8000858:	fa01 f202 	lsl.w	r2, r1, r2
 800085c:	b292      	uxth	r2, r2
 800085e:	431a      	orrs	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	68da      	ldr	r2, [r3, #12]
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	b29b      	uxth	r3, r3
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	2103      	movs	r1, #3
 8000870:	fa01 f303 	lsl.w	r3, r1, r3
 8000874:	43db      	mvns	r3, r3
 8000876:	401a      	ands	r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	68da      	ldr	r2, [r3, #12]
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	79db      	ldrb	r3, [r3, #7]
 8000884:	4619      	mov	r1, r3
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	fa01 f303 	lsl.w	r3, r1, r3
 800088e:	431a      	orrs	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	3301      	adds	r3, #1
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	2b0f      	cmp	r3, #15
 800089e:	d985      	bls.n	80007ac <GPIO_Init+0x1c>
    }
  }
}
 80008a0:	bf00      	nop
 80008a2:	371c      	adds	r7, #28
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80008b8:	2300      	movs	r3, #0
 80008ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	691a      	ldr	r2, [r3, #16]
 80008c0:	887b      	ldrh	r3, [r7, #2]
 80008c2:	4013      	ands	r3, r2
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d002      	beq.n	80008ce <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80008c8:	2301      	movs	r3, #1
 80008ca:	73fb      	strb	r3, [r7, #15]
 80008cc:	e001      	b.n	80008d2 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80008ce:	2300      	movs	r3, #0
 80008d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008ec:	78fb      	ldrb	r3, [r7, #3]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d006      	beq.n	8000900 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80008f2:	490a      	ldr	r1, [pc, #40]	; (800091c <RCC_AHB1PeriphClockCmd+0x3c>)
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <RCC_AHB1PeriphClockCmd+0x3c>)
 80008f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80008fe:	e006      	b.n	800090e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000900:	4906      	ldr	r1, [pc, #24]	; (800091c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	43db      	mvns	r3, r3
 800090a:	4013      	ands	r3, r2
 800090c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	460b      	mov	r3, r1
 800092a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800092c:	78fb      	ldrb	r3, [r7, #3]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d006      	beq.n	8000940 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000932:	490a      	ldr	r1, [pc, #40]	; (800095c <RCC_APB2PeriphClockCmd+0x3c>)
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <RCC_APB2PeriphClockCmd+0x3c>)
 8000936:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4313      	orrs	r3, r2
 800093c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800093e:	e006      	b.n	800094e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000940:	4906      	ldr	r1, [pc, #24]	; (800095c <RCC_APB2PeriphClockCmd+0x3c>)
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <RCC_APB2PeriphClockCmd+0x3c>)
 8000944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	43db      	mvns	r3, r3
 800094a:	4013      	ands	r3, r2
 800094c:	644b      	str	r3, [r1, #68]	; 0x44
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800

08000960 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	460b      	mov	r3, r1
 800096a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800096c:	2300      	movs	r3, #0
 800096e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	891b      	ldrh	r3, [r3, #8]
 8000974:	b29a      	uxth	r2, r3
 8000976:	887b      	ldrh	r3, [r7, #2]
 8000978:	4013      	ands	r3, r2
 800097a:	b29b      	uxth	r3, r3
 800097c:	2b00      	cmp	r3, #0
 800097e:	d002      	beq.n	8000986 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000980:	2301      	movs	r3, #1
 8000982:	73fb      	strb	r3, [r7, #15]
 8000984:	e001      	b.n	800098a <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000986:	2300      	movs	r3, #0
 8000988:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800098a:	7bfb      	ldrb	r3, [r7, #15]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000998:	b490      	push	{r4, r7}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	460a      	mov	r2, r1
 80009a2:	71fb      	strb	r3, [r7, #7]
 80009a4:	4613      	mov	r3, r2
 80009a6:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80009ac:	79bb      	ldrb	r3, [r7, #6]
 80009ae:	f003 0303 	and.w	r3, r3, #3
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	220f      	movs	r2, #15
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80009bc:	4916      	ldr	r1, [pc, #88]	; (8000a18 <SYSCFG_EXTILineConfig+0x80>)
 80009be:	79bb      	ldrb	r3, [r7, #6]
 80009c0:	089b      	lsrs	r3, r3, #2
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	4618      	mov	r0, r3
 80009c6:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <SYSCFG_EXTILineConfig+0x80>)
 80009c8:	79bb      	ldrb	r3, [r7, #6]
 80009ca:	089b      	lsrs	r3, r3, #2
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	3302      	adds	r3, #2
 80009d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	43db      	mvns	r3, r3
 80009d8:	401a      	ands	r2, r3
 80009da:	1c83      	adds	r3, r0, #2
 80009dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80009e0:	480d      	ldr	r0, [pc, #52]	; (8000a18 <SYSCFG_EXTILineConfig+0x80>)
 80009e2:	79bb      	ldrb	r3, [r7, #6]
 80009e4:	089b      	lsrs	r3, r3, #2
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	461c      	mov	r4, r3
 80009ea:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <SYSCFG_EXTILineConfig+0x80>)
 80009ec:	79bb      	ldrb	r3, [r7, #6]
 80009ee:	089b      	lsrs	r3, r3, #2
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	3302      	adds	r3, #2
 80009f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009f8:	79f9      	ldrb	r1, [r7, #7]
 80009fa:	79bb      	ldrb	r3, [r7, #6]
 80009fc:	f003 0303 	and.w	r3, r3, #3
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	fa01 f303 	lsl.w	r3, r1, r3
 8000a06:	431a      	orrs	r2, r3
 8000a08:	1ca3      	adds	r3, r4, #2
 8000a0a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc90      	pop	{r4, r7}
 8000a16:	4770      	bx	lr
 8000a18:	40013800 	.word	0x40013800

08000a1c <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <STM_EVAL_LEDInit+0x50>)
 8000a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2e:	2101      	movs	r1, #1
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff55 	bl	80008e0 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <STM_EVAL_LEDInit+0x54>)
 8000a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000a40:	2301      	movs	r3, #1
 8000a42:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000a44:	2300      	movs	r3, #0
 8000a46:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <STM_EVAL_LEDInit+0x58>)
 8000a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a58:	f107 0208 	add.w	r2, r7, #8
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fe96 	bl	8000790 <GPIO_Init>
}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	080011dc 	.word	0x080011dc
 8000a70:	080011d4 	.word	0x080011d4
 8000a74:	20000000 	.word	0x20000000

08000a78 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4a06      	ldr	r2, [pc, #24]	; (8000aa0 <STM_EVAL_LEDOn+0x28>)
 8000a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8a:	79fa      	ldrb	r2, [r7, #7]
 8000a8c:	4905      	ldr	r1, [pc, #20]	; (8000aa4 <STM_EVAL_LEDOn+0x2c>)
 8000a8e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000a92:	831a      	strh	r2, [r3, #24]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	080011d4 	.word	0x080011d4

08000aa8 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	4a06      	ldr	r2, [pc, #24]	; (8000ad0 <STM_EVAL_LEDOff+0x28>)
 8000ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aba:	79fa      	ldrb	r2, [r7, #7]
 8000abc:	4905      	ldr	r1, [pc, #20]	; (8000ad4 <STM_EVAL_LEDOff+0x2c>)
 8000abe:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000ac2:	835a      	strh	r2, [r3, #26]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	080011d4 	.word	0x080011d4

08000ad8 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	460a      	mov	r2, r1
 8000ae2:	71fb      	strb	r3, [r7, #7]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8000ae8:	2301      	movs	r3, #1
 8000aea:	2101      	movs	r1, #1
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fef7 	bl	80008e0 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000af2:	2101      	movs	r1, #1
 8000af4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000af8:	f7ff ff12 	bl	8000920 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000afc:	2300      	movs	r3, #0
 8000afe:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8000b04:	2301      	movs	r3, #1
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	4a18      	ldr	r2, [pc, #96]	; (8000b6c <STM_EVAL_PBInit+0x94>)
 8000b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b10:	f107 0218 	add.w	r2, r7, #24
 8000b14:	4611      	mov	r1, r2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fe3a 	bl	8000790 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 8000b1c:	79bb      	ldrb	r3, [r7, #6]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d11f      	bne.n	8000b62 <STM_EVAL_PBInit+0x8a>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8000b22:	2300      	movs	r3, #0
 8000b24:	2200      	movs	r2, #0
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff35 	bl	8000998 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8000b2e:	2301      	movs	r3, #1
 8000b30:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000b32:	2300      	movs	r3, #0
 8000b34:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8000b36:	2308      	movs	r3, #8
 8000b38:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 8000b3e:	f107 0310 	add.w	r3, r7, #16
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fc98 	bl	8000478 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8000b48:	2306      	movs	r3, #6
 8000b4a:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8000b50:	230f      	movs	r3, #15
 8000b52:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000b54:	2301      	movs	r3, #1
 8000b56:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fb33 	bl	80001c8 <NVIC_Init>
  }
}
 8000b62:	bf00      	nop
 8000b64:	3720      	adds	r7, #32
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000010 	.word	0x20000010

08000b70 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000b74:	4b35      	ldr	r3, [pc, #212]	; (8000c4c <Audio_MAL_IRQHandler+0xdc>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b35      	ldr	r3, [pc, #212]	; (8000c50 <Audio_MAL_IRQHandler+0xe0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4610      	mov	r0, r2
 8000b80:	f7ff fc10 	bl	80003a4 <DMA_GetFlagStatus>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d05e      	beq.n	8000c48 <Audio_MAL_IRQHandler+0xd8>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000b8a:	4b32      	ldr	r3, [pc, #200]	; (8000c54 <Audio_MAL_IRQHandler+0xe4>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d04c      	beq.n	8000c2c <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000b92:	bf00      	nop
 8000b94:	4b2d      	ldr	r3, [pc, #180]	; (8000c4c <Audio_MAL_IRQHandler+0xdc>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fbeb 	bl	8000374 <DMA_GetCmdStatus>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d1f7      	bne.n	8000b94 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000ba4:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <Audio_MAL_IRQHandler+0xdc>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <Audio_MAL_IRQHandler+0xe0>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4610      	mov	r0, r2
 8000bb0:	f7ff fc34 	bl	800041c <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000bb4:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <Audio_MAL_IRQHandler+0xe8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <Audio_MAL_IRQHandler+0xec>)
 8000bbc:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000bbe:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <Audio_MAL_IRQHandler+0xe4>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	bf28      	it	cs
 8000bca:	4613      	movcs	r3, r2
 8000bcc:	4a23      	ldr	r2, [pc, #140]	; (8000c5c <Audio_MAL_IRQHandler+0xec>)
 8000bce:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <Audio_MAL_IRQHandler+0xdc>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4921      	ldr	r1, [pc, #132]	; (8000c5c <Audio_MAL_IRQHandler+0xec>)
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fb58 	bl	800028c <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <Audio_MAL_IRQHandler+0xdc>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2101      	movs	r1, #1
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fbaa 	bl	800033c <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000be8:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <Audio_MAL_IRQHandler+0xe8>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <Audio_MAL_IRQHandler+0xe4>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf4:	d203      	bcs.n	8000bfe <Audio_MAL_IRQHandler+0x8e>
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <Audio_MAL_IRQHandler+0xe4>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	e000      	b.n	8000c00 <Audio_MAL_IRQHandler+0x90>
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <Audio_MAL_IRQHandler+0xf0>)
 8000c00:	4413      	add	r3, r2
 8000c02:	4a15      	ldr	r2, [pc, #84]	; (8000c58 <Audio_MAL_IRQHandler+0xe8>)
 8000c04:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <Audio_MAL_IRQHandler+0xe4>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <Audio_MAL_IRQHandler+0xe4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c12:	428b      	cmp	r3, r1
 8000c14:	bf28      	it	cs
 8000c16:	460b      	movcs	r3, r1
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <Audio_MAL_IRQHandler+0xe4>)
 8000c1c:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <Audio_MAL_IRQHandler+0xdc>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2101      	movs	r1, #1
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fb89 	bl	800033c <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000c2a:	e00d      	b.n	8000c48 <Audio_MAL_IRQHandler+0xd8>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <Audio_MAL_IRQHandler+0xdc>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fb82 	bl	800033c <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <Audio_MAL_IRQHandler+0xdc>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <Audio_MAL_IRQHandler+0xe0>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	4610      	mov	r0, r2
 8000c44:	f7ff fbea 	bl	800041c <DMA_ClearFlag>
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	2000001c 	.word	0x2000001c
 8000c50:	20000020 	.word	0x20000020
 8000c54:	20000014 	.word	0x20000014
 8000c58:	20000050 	.word	0x20000050
 8000c5c:	20000090 	.word	0x20000090
 8000c60:	0001fffe 	.word	0x0001fffe

08000c64 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000c68:	f7ff ff82 	bl	8000b70 <Audio_MAL_IRQHandler>
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000c74:	f7ff ff7c 	bl	8000b70 <Audio_MAL_IRQHandler>
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000c80:	2102      	movs	r1, #2
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <SPI3_IRQHandler+0x1c>)
 8000c84:	f7ff fe6c 	bl	8000960 <SPI_I2S_GetFlagStatus>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SPI3_IRQHandler+0x16>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000c8e:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <SPI3_IRQHandler+0x20>)
 8000c90:	681b      	ldr	r3, [r3, #0]
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    //SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack());
  }
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40003c00 	.word	0x40003c00
 8000c9c:	20000018 	.word	0x20000018

08000ca0 <main>:
int CheckData(uint32_t FLASH_SECTOR, uint32_t address, uint32_t data);
uint32_t ReadMemoryAddress(uint32_t FLASH_SECTOR, uint32_t address);
int CheckDeleteFlag(uint32_t FLASH_SECTOR, uint32_t address);

int main(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
  int i = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  *  SCB->VTOR register.  
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

  /* Initialize LEDs */
  STM_EVAL_LEDInit(LED3);
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff feb6 	bl	8000a1c <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED4);
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff feb3 	bl	8000a1c <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED5);
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f7ff feb0 	bl	8000a1c <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED6);
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f7ff fead 	bl	8000a1c <STM_EVAL_LEDInit>

  /* Initialize User Button*/
  STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_GPIO);
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f7ff ff07 	bl	8000ad8 <STM_EVAL_PBInit>

  /*We will only use one sector of flash memory - sector 3*/
  uint32_t FLASH_SECTOR;
  FLASH_SECTOR = ADDR_FLASH_SECTOR_3;
 8000cca:	4b4f      	ldr	r3, [pc, #316]	; (8000e08 <main+0x168>)
 8000ccc:	60bb      	str	r3, [r7, #8]
  uint32_t NEXT_FLASH_SECTOR;
  NEXT_FLASH_SECTOR = ADDR_FLASH_SECTOR_4;
 8000cce:	4b4f      	ldr	r3, [pc, #316]	; (8000e0c <main+0x16c>)
 8000cd0:	607b      	str	r3, [r7, #4]

  uint32_t DATA_32;
  DATA_32 = 0x00000000;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]

  if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0))
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	484d      	ldr	r0, [pc, #308]	; (8000e10 <main+0x170>)
 8000cda:	f7ff fde7 	bl	80008ac <GPIO_ReadInputDataBit>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d00a      	beq.n	8000cfa <main+0x5a>
  {
	  STM_EVAL_LEDOn(LED4);
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f7ff fec7 	bl	8000a78 <STM_EVAL_LEDOn>
	  STM_EVAL_LEDOn(LED6);
 8000cea:	2003      	movs	r0, #3
 8000cec:	f7ff fec4 	bl	8000a78 <STM_EVAL_LEDOn>
	  WriteFlash(FLASH_SECTOR, NEXT_FLASH_SECTOR, DATA_32);
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	68b8      	ldr	r0, [r7, #8]
 8000cf6:	f000 f897 	bl	8000e28 <WriteFlash>
  }

  //WriteFlash(FLASH_SECTOR, DATA_32);
  CheckData(FLASH_SECTOR, 0x00000000, DATA_32);
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	68b8      	ldr	r0, [r7, #8]
 8000d00:	f000 f8f2 	bl	8000ee8 <CheckData>
  uint32_t address = 0x00000000;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]

  while (1)
  {
	if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0))
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4841      	ldr	r0, [pc, #260]	; (8000e10 <main+0x170>)
 8000d0c:	f7ff fdce 	bl	80008ac <GPIO_ReadInputDataBit>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d00d      	beq.n	8000d32 <main+0x92>
	{
		DATA_32 += 0x00000001;
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	613b      	str	r3, [r7, #16]
		if(DATA_32==0x00000005) DATA_32 = 0x00000001;
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	2b05      	cmp	r3, #5
 8000d20:	d101      	bne.n	8000d26 <main+0x86>
 8000d22:	2301      	movs	r3, #1
 8000d24:	613b      	str	r3, [r7, #16]
		address = WriteFlash(FLASH_SECTOR, NEXT_FLASH_SECTOR, DATA_32);
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	68b8      	ldr	r0, [r7, #8]
 8000d2c:	f000 f87c 	bl	8000e28 <WriteFlash>
 8000d30:	60f8      	str	r0, [r7, #12]
	}
	if(CheckData(FLASH_SECTOR, 0x00000000, 0x80000001))
 8000d32:	4a38      	ldr	r2, [pc, #224]	; (8000e14 <main+0x174>)
 8000d34:	2100      	movs	r1, #0
 8000d36:	68b8      	ldr	r0, [r7, #8]
 8000d38:	f000 f8d6 	bl	8000ee8 <CheckData>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d00c      	beq.n	8000d5c <main+0xbc>
	{
			STM_EVAL_LEDOn(LED3);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f7ff fe98 	bl	8000a78 <STM_EVAL_LEDOn>
			STM_EVAL_LEDOn(LED4);
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f7ff fe95 	bl	8000a78 <STM_EVAL_LEDOn>
			STM_EVAL_LEDOn(LED5);
 8000d4e:	2002      	movs	r0, #2
 8000d50:	f7ff fe92 	bl	8000a78 <STM_EVAL_LEDOn>
			STM_EVAL_LEDOn(LED6);
 8000d54:	2003      	movs	r0, #3
 8000d56:	f7ff fe8f 	bl	8000a78 <STM_EVAL_LEDOn>
 8000d5a:	e04e      	b.n	8000dfa <main+0x15a>
	}
	else if(CheckData(FLASH_SECTOR, address, 0x80000002))
 8000d5c:	4a2e      	ldr	r2, [pc, #184]	; (8000e18 <main+0x178>)
 8000d5e:	68f9      	ldr	r1, [r7, #12]
 8000d60:	68b8      	ldr	r0, [r7, #8]
 8000d62:	f000 f8c1 	bl	8000ee8 <CheckData>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d00c      	beq.n	8000d86 <main+0xe6>
	{
		STM_EVAL_LEDOn(LED3);
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f7ff fe83 	bl	8000a78 <STM_EVAL_LEDOn>
		STM_EVAL_LEDOff(LED4);
 8000d72:	2000      	movs	r0, #0
 8000d74:	f7ff fe98 	bl	8000aa8 <STM_EVAL_LEDOff>
		STM_EVAL_LEDOff(LED5);
 8000d78:	2002      	movs	r0, #2
 8000d7a:	f7ff fe95 	bl	8000aa8 <STM_EVAL_LEDOff>
		STM_EVAL_LEDOff(LED6);
 8000d7e:	2003      	movs	r0, #3
 8000d80:	f7ff fe92 	bl	8000aa8 <STM_EVAL_LEDOff>
 8000d84:	e039      	b.n	8000dfa <main+0x15a>
	}
	else if(CheckData(FLASH_SECTOR, address, 0x80000003))
 8000d86:	4a25      	ldr	r2, [pc, #148]	; (8000e1c <main+0x17c>)
 8000d88:	68f9      	ldr	r1, [r7, #12]
 8000d8a:	68b8      	ldr	r0, [r7, #8]
 8000d8c:	f000 f8ac 	bl	8000ee8 <CheckData>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d00c      	beq.n	8000db0 <main+0x110>
	{
		STM_EVAL_LEDOff(LED3);
 8000d96:	2001      	movs	r0, #1
 8000d98:	f7ff fe86 	bl	8000aa8 <STM_EVAL_LEDOff>
		STM_EVAL_LEDOn(LED4);
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f7ff fe6b 	bl	8000a78 <STM_EVAL_LEDOn>
		STM_EVAL_LEDOff(LED5);
 8000da2:	2002      	movs	r0, #2
 8000da4:	f7ff fe80 	bl	8000aa8 <STM_EVAL_LEDOff>
		STM_EVAL_LEDOff(LED6);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f7ff fe7d 	bl	8000aa8 <STM_EVAL_LEDOff>
 8000dae:	e024      	b.n	8000dfa <main+0x15a>

	}
	else if(CheckData(FLASH_SECTOR, address, 0x80000004))
 8000db0:	4a1b      	ldr	r2, [pc, #108]	; (8000e20 <main+0x180>)
 8000db2:	68f9      	ldr	r1, [r7, #12]
 8000db4:	68b8      	ldr	r0, [r7, #8]
 8000db6:	f000 f897 	bl	8000ee8 <CheckData>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d00c      	beq.n	8000dda <main+0x13a>
	{
		STM_EVAL_LEDOff(LED3);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f7ff fe71 	bl	8000aa8 <STM_EVAL_LEDOff>
		STM_EVAL_LEDOff(LED4);
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f7ff fe6e 	bl	8000aa8 <STM_EVAL_LEDOff>
		STM_EVAL_LEDOn(LED5);
 8000dcc:	2002      	movs	r0, #2
 8000dce:	f7ff fe53 	bl	8000a78 <STM_EVAL_LEDOn>
		STM_EVAL_LEDOff(LED6);
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	f7ff fe68 	bl	8000aa8 <STM_EVAL_LEDOff>
 8000dd8:	e00f      	b.n	8000dfa <main+0x15a>
	}
	else
	{
		STM_EVAL_LEDOff(LED3);
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f7ff fe64 	bl	8000aa8 <STM_EVAL_LEDOff>
		STM_EVAL_LEDOff(LED4);
 8000de0:	2000      	movs	r0, #0
 8000de2:	f7ff fe61 	bl	8000aa8 <STM_EVAL_LEDOff>
		STM_EVAL_LEDOff(LED5);
 8000de6:	2002      	movs	r0, #2
 8000de8:	f7ff fe5e 	bl	8000aa8 <STM_EVAL_LEDOff>
		STM_EVAL_LEDOn(LED6);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f7ff fe43 	bl	8000a78 <STM_EVAL_LEDOn>
	}

    while(i<1000000)
 8000df2:	e002      	b.n	8000dfa <main+0x15a>
    {
	    i++;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	3301      	adds	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
    while(i<1000000)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <main+0x184>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	ddf8      	ble.n	8000df4 <main+0x154>
    }
    i = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
	if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0))
 8000e06:	e77f      	b.n	8000d08 <main+0x68>
 8000e08:	0800c000 	.word	0x0800c000
 8000e0c:	08010000 	.word	0x08010000
 8000e10:	40020000 	.word	0x40020000
 8000e14:	80000001 	.word	0x80000001
 8000e18:	80000002 	.word	0x80000002
 8000e1c:	80000003 	.word	0x80000003
 8000e20:	80000004 	.word	0x80000004
 8000e24:	000f423f 	.word	0x000f423f

08000e28 <WriteFlash>:
  }
}

uint32_t WriteFlash(uint32_t FLASH_SECTOR, uint32_t NEXT_FLASH_SECTOR, uint32_t data)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t address = FLASH_SECTOR;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	61fb      	str	r3, [r7, #28]

  uint32_t id_value;
  id_value = (uint32_t)0x80000000 | data;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e3e:	61bb      	str	r3, [r7, #24]

  uint32_t saved_value;
  /* Enable the flash control register access */
  FLASH_Unlock();
 8000e40:	f7ff fb8c 	bl	800055c <FLASH_Unlock>

  /* Erase the user Flash area ************************************************/
  /* area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR */

  /* Clear pending flags (if any) */
  FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8000e44:	20f3      	movs	r0, #243	; 0xf3
 8000e46:	f7ff fc45 	bl	80006d4 <FLASH_ClearFlag>
   * 0x1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX (it is a 32bit word), since i'm looking at the first address,
   * search for a 0x1XXXXXXX. If it is true, then write it as zero and jump to the next usable address
   * (address += 4). There, write 0x8000XXXX (which is the new id).
   *
   * */
  uwAddress = FLASH_SECTOR;
 8000e4a:	4a25      	ldr	r2, [pc, #148]	; (8000ee0 <WriteFlash+0xb8>)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	6013      	str	r3, [r2, #0]
  uint32_t FLASH_SECTOR_LIMIT = NEXT_FLASH_SECTOR - 4 ;
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	3b04      	subs	r3, #4
 8000e54:	617b      	str	r3, [r7, #20]

  do
  {
	saved_value = (uint32_t)ReadMemoryAddress(FLASH_SECTOR, uwAddress);
 8000e56:	4b22      	ldr	r3, [pc, #136]	; (8000ee0 <WriteFlash+0xb8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f000 f865 	bl	8000f2c <ReadMemoryAddress>
 8000e62:	6138      	str	r0, [r7, #16]
	if (uwAddress >= FLASH_SECTOR_LIMIT)
 8000e64:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <WriteFlash+0xb8>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d30c      	bcc.n	8000e88 <WriteFlash+0x60>
	{
		uwAddress = FLASH_SECTOR;
 8000e6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ee0 <WriteFlash+0xb8>)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6013      	str	r3, [r2, #0]
	    /* Start the erase operation */
	    /* Only writing on one sector of the flash, so, only need to erase that sector*/
	    /* Only gonna erase one time every 1k write operations - only gonna erase if the last address is occupied*/
		/* Device voltage range supposed to be [2.7V to 3.6V], the operation will
		   be done by word */
		if (FLASH_EraseSector(uwSectorCounter, VoltageRange_3) != FLASH_COMPLETE)
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <WriteFlash+0xbc>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2102      	movs	r1, #2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fb96 	bl	80005ac <FLASH_EraseSector>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b08      	cmp	r3, #8
 8000e84:	d021      	beq.n	8000eca <WriteFlash+0xa2>
		{
		  /* Error occurred while sector erase.
			 User can add here some code to deal with this error  */
		  while (1)
 8000e86:	e7fe      	b.n	8000e86 <WriteFlash+0x5e>
		  }
		}
	}
	else
	{
		if(saved_value>>31)
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	da18      	bge.n	8000ec0 <WriteFlash+0x98>
		{
			if (FLASH_ProgramWord(uwAddress, 0x00000000) == FLASH_COMPLETE)
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <WriteFlash+0xb8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fbe9 	bl	800066c <FLASH_ProgramWord>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b08      	cmp	r3, #8
 8000e9e:	d000      	beq.n	8000ea2 <WriteFlash+0x7a>
			}
			else
			{
			  /* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
			  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <WriteFlash+0x78>
			  {
			  }
			}
			uwAddress += 4;
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <WriteFlash+0xb8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	3304      	adds	r3, #4
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <WriteFlash+0xb8>)
 8000eaa:	6013      	str	r3, [r2, #0]
			if (FLASH_ProgramWord(uwAddress, id_value) == FLASH_COMPLETE)
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <WriteFlash+0xb8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	69b9      	ldr	r1, [r7, #24]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fbda 	bl	800066c <FLASH_ProgramWord>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b08      	cmp	r3, #8
 8000ebc:	d005      	beq.n	8000eca <WriteFlash+0xa2>
			}
			else
			{
			  /* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
			  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <WriteFlash+0x96>
			  }
			}
		}
		else
		{
			uwAddress +=4 ;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <WriteFlash+0xb8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <WriteFlash+0xb8>)
 8000ec8:	6013      	str	r3, [r2, #0]
		}
	}
  } while(!(saved_value>>31));
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	dac2      	bge.n	8000e56 <WriteFlash+0x2e>

  /* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) */
  FLASH_Lock();
 8000ed0:	f7ff fb5c 	bl	800058c <FLASH_Lock>
  return address;
 8000ed4:	69fb      	ldr	r3, [r7, #28]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3720      	adds	r7, #32
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000040 	.word	0x20000040
 8000ee4:	20000044 	.word	0x20000044

08000ee8 <CheckData>:

/* Check if the programmed data is OK ***************************************/
/*  MemoryProgramStatus = 0: data programmed correctly
    MemoryProgramStatus != 0: number of words not programmed correctly */
int CheckData(uint32_t FLASH_SECTOR, uint32_t address, uint32_t data)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uwAddress = FLASH_SECTOR + address;
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	4413      	add	r3, r2
 8000efa:	4a09      	ldr	r2, [pc, #36]	; (8000f20 <CheckData+0x38>)
 8000efc:	6013      	str	r3, [r2, #0]
  uwMemoryProgramStatus = 0;
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <CheckData+0x3c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]

  //while (uwAddress <= FLASH_SECTOR)
  //{
    uwData32 = *(__IO uint32_t*)uwAddress;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <CheckData+0x38>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <CheckData+0x40>)
 8000f0c:	6013      	str	r3, [r2, #0]

    return uwData32;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <CheckData+0x40>)
 8000f10:	681b      	ldr	r3, [r3, #0]
    //STM_EVAL_LEDOn(LED5);
    return 1;
    //STM_EVAL_LEDOn(LED4);
    //STM_EVAL_LEDOn(LED6);
  }
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000040 	.word	0x20000040
 8000f24:	2000004c 	.word	0x2000004c
 8000f28:	20000048 	.word	0x20000048

08000f2c <ReadMemoryAddress>:

uint32_t ReadMemoryAddress(uint32_t FLASH_SECTOR, uint32_t address)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uwAddress = address;
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <ReadMemoryAddress+0x2c>)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	6013      	str	r3, [r2, #0]

  uwData32 = *(__IO uint32_t*)uwAddress;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <ReadMemoryAddress+0x2c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <ReadMemoryAddress+0x30>)
 8000f44:	6013      	str	r3, [r2, #0]

  return uwData32;
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <ReadMemoryAddress+0x30>)
 8000f48:	681b      	ldr	r3, [r3, #0]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000040 	.word	0x20000040
 8000f5c:	20000048 	.word	0x20000048

08000f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f66:	e003      	b.n	8000f70 <LoopCopyDataInit>

08000f68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f6e:	3104      	adds	r1, #4

08000f70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f70:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f78:	d3f6      	bcc.n	8000f68 <CopyDataInit>
  ldr  r2, =_sbss
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f7c:	e002      	b.n	8000f84 <LoopFillZerobss>

08000f7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f80:	f842 3b04 	str.w	r3, [r2], #4

08000f84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f88:	d3f9      	bcc.n	8000f7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f8a:	f000 f841 	bl	8001010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f8e:	f000 f8f1 	bl	8001174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f92:	f7ff fe85 	bl	8000ca0 <main>
  bx  lr    
 8000f96:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f98:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f9c:	080011f4 	.word	0x080011f4
  ldr  r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fa4:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8000fa8:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 8000fac:	200000cc 	.word	0x200000cc

08000fb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC_IRQHandler>

08000fb2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <HardFault_Handler+0x4>

08000fc6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <MemManage_Handler+0x4>

08000fcc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <BusFault_Handler+0x4>

08000fd2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <UsageFault_Handler+0x4>

08000fd8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001014:	4a16      	ldr	r2, [pc, #88]	; (8001070 <SystemInit+0x60>)
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <SystemInit+0x60>)
 8001018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800101c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001024:	4a13      	ldr	r2, [pc, #76]	; (8001074 <SystemInit+0x64>)
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <SystemInit+0x64>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <SystemInit+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001036:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <SystemInit+0x64>)
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <SystemInit+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001044:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <SystemInit+0x64>)
 8001048:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <SystemInit+0x68>)
 800104a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800104c:	4a09      	ldr	r2, [pc, #36]	; (8001074 <SystemInit+0x64>)
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <SystemInit+0x64>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001056:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <SystemInit+0x64>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800105e:	f000 f80d 	bl	800107c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001062:	4b03      	ldr	r3, [pc, #12]	; (8001070 <SystemInit+0x60>)
 8001064:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001068:	609a      	str	r2, [r3, #8]
#endif
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00
 8001074:	40023800 	.word	0x40023800
 8001078:	24003010 	.word	0x24003010

0800107c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800108a:	4a36      	ldr	r2, [pc, #216]	; (8001164 <SetSysClock+0xe8>)
 800108c:	4b35      	ldr	r3, [pc, #212]	; (8001164 <SetSysClock+0xe8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001094:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001096:	4b33      	ldr	r3, [pc, #204]	; (8001164 <SetSysClock+0xe8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3301      	adds	r3, #1
 80010a4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d103      	bne.n	80010b4 <SetSysClock+0x38>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80010b2:	d1f0      	bne.n	8001096 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80010b4:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <SetSysClock+0xe8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80010c0:	2301      	movs	r3, #1
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	e001      	b.n	80010ca <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80010c6:	2300      	movs	r3, #0
 80010c8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d142      	bne.n	8001156 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80010d0:	4a24      	ldr	r2, [pc, #144]	; (8001164 <SetSysClock+0xe8>)
 80010d2:	4b24      	ldr	r3, [pc, #144]	; (8001164 <SetSysClock+0xe8>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010da:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80010dc:	4a22      	ldr	r2, [pc, #136]	; (8001168 <SetSysClock+0xec>)
 80010de:	4b22      	ldr	r3, [pc, #136]	; (8001168 <SetSysClock+0xec>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010e6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80010e8:	4a1e      	ldr	r2, [pc, #120]	; (8001164 <SetSysClock+0xe8>)
 80010ea:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <SetSysClock+0xe8>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80010f0:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <SetSysClock+0xe8>)
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <SetSysClock+0xe8>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010fa:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80010fc:	4a19      	ldr	r2, [pc, #100]	; (8001164 <SetSysClock+0xe8>)
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <SetSysClock+0xe8>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001106:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <SetSysClock+0xe8>)
 800110a:	4a18      	ldr	r2, [pc, #96]	; (800116c <SetSysClock+0xf0>)
 800110c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800110e:	4a15      	ldr	r2, [pc, #84]	; (8001164 <SetSysClock+0xe8>)
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <SetSysClock+0xe8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001118:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800111a:	bf00      	nop
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <SetSysClock+0xe8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0f9      	beq.n	800111c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <SetSysClock+0xf4>)
 800112a:	f240 6205 	movw	r2, #1541	; 0x605
 800112e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001130:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <SetSysClock+0xe8>)
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <SetSysClock+0xe8>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f023 0303 	bic.w	r3, r3, #3
 800113a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800113c:	4a09      	ldr	r2, [pc, #36]	; (8001164 <SetSysClock+0xe8>)
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <SetSysClock+0xe8>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f043 0302 	orr.w	r3, r3, #2
 8001146:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001148:	bf00      	nop
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <SetSysClock+0xe8>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 030c 	and.w	r3, r3, #12
 8001152:	2b08      	cmp	r3, #8
 8001154:	d1f9      	bne.n	800114a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40007000 	.word	0x40007000
 800116c:	07405408 	.word	0x07405408
 8001170:	40023c00 	.word	0x40023c00

08001174 <__libc_init_array>:
 8001174:	b570      	push	{r4, r5, r6, lr}
 8001176:	4e0d      	ldr	r6, [pc, #52]	; (80011ac <__libc_init_array+0x38>)
 8001178:	4c0d      	ldr	r4, [pc, #52]	; (80011b0 <__libc_init_array+0x3c>)
 800117a:	1ba4      	subs	r4, r4, r6
 800117c:	10a4      	asrs	r4, r4, #2
 800117e:	2500      	movs	r5, #0
 8001180:	42a5      	cmp	r5, r4
 8001182:	d109      	bne.n	8001198 <__libc_init_array+0x24>
 8001184:	4e0b      	ldr	r6, [pc, #44]	; (80011b4 <__libc_init_array+0x40>)
 8001186:	4c0c      	ldr	r4, [pc, #48]	; (80011b8 <__libc_init_array+0x44>)
 8001188:	f000 f818 	bl	80011bc <_init>
 800118c:	1ba4      	subs	r4, r4, r6
 800118e:	10a4      	asrs	r4, r4, #2
 8001190:	2500      	movs	r5, #0
 8001192:	42a5      	cmp	r5, r4
 8001194:	d105      	bne.n	80011a2 <__libc_init_array+0x2e>
 8001196:	bd70      	pop	{r4, r5, r6, pc}
 8001198:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800119c:	4798      	blx	r3
 800119e:	3501      	adds	r5, #1
 80011a0:	e7ee      	b.n	8001180 <__libc_init_array+0xc>
 80011a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011a6:	4798      	blx	r3
 80011a8:	3501      	adds	r5, #1
 80011aa:	e7f2      	b.n	8001192 <__libc_init_array+0x1e>
 80011ac:	080011ec 	.word	0x080011ec
 80011b0:	080011ec 	.word	0x080011ec
 80011b4:	080011ec 	.word	0x080011ec
 80011b8:	080011f0 	.word	0x080011f0

080011bc <_init>:
 80011bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011be:	bf00      	nop
 80011c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011c2:	bc08      	pop	{r3}
 80011c4:	469e      	mov	lr, r3
 80011c6:	4770      	bx	lr

080011c8 <_fini>:
 80011c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ca:	bf00      	nop
 80011cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ce:	bc08      	pop	{r3}
 80011d0:	469e      	mov	lr, r3
 80011d2:	4770      	bx	lr
